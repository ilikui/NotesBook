name: Build and Deploy Preview

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  build-preview:
    if: ${{ github.repository == 'ilikui/NotesBook' }}
    runs-on: ubuntu-latest
    name: Build Preview
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci

      - name: Check package.json scripts
        run: |
          echo "package.json 中的脚本:"
          node -e "console.log(JSON.stringify(require('./package.json').scripts, null, 2))"

      - name: Format code with Prettier
        run: npx prettier --write .

      - name: Check types and style
        run: npm run check

      - name: Build Quartz (尝试多种方法)
        run: |
          set +e  # 防止某一步失败导致整个脚本退出
          echo "尝试方法 1: 使用 npm run build..."
          npm run build && echo "方法 1 成功" && exit 0
          
          echo "方法 1 失败，尝试方法 2: 编译 TypeScript 然后运行..."
          npx tsc
          node quartz/build.js -d content -v && echo "方法 2 成功" && exit 0
          
          # echo "方法 2 失败，尝试方法 3: 运行 bootstrap 文件..."
          # node quartz/bootstrap-cli.mjs build -d content -v && echo "方法 3 成功" && exit 0
          
          echo "方法 3 失败，尝试方法 4: 使用 npx 和本地 Quartz..."
          npx --prefix . quartz build -d content -v && echo "方法 4 成功" && exit 0
          
          echo "所有构建方法都失败了!"
          exit 1

      - name: Verify build output
        run: |
          echo "构建输出内容:"
          ls -la public/ || echo "public 目录不存在"
          find public/ -type f | head -10 || true

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: public-build
          path: public

  deploy-to-github-pages:
    if: ${{ github.repository == 'ilikui/NotesBook' }} # 可选：根据需要添加条件，例如只在 main 分支触发
    runs-on: ubuntu-latest
    needs: build-preview  # 确保在 build-preview 任务成功完成后运行
    name: Deploy to GitHub Pages
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: public-build
          path: public  # 下载产物到 public 目录

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3  # 一个流行的部署到 gh-pages 分支的 Action
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}  # GitHub 自动提供的 token，无需手动创建
          publish_dir: ./public  # 将指定目录的内容推送到 gh-pages 分支
          # user_name: 'github-actions[bot]'  # 可选：提交者用户名
          # user_email: 'github-actions[bot]@users.noreply.github.com'  # 可选：提交者邮箱
          # commit_message: 'Deploy from GitHub Actions'  # 可选：自定义提交信息