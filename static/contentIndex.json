{"Archive/Archive":{"slug":"Archive/Archive","filePath":"Archive/Archive.md","title":"Archive","links":[],"tags":[],"content":""},"Archive/Read/authoring-content":{"slug":"Archive/Read/authoring-content","filePath":"Archive/Read/authoring content.md","title":"Authoring Content","links":["/","Archive/Read/build","Area/EE/计算机组成原理","Area/EE/处理器架构","Area/EE/英语","Resource/RSS/Frontmatter","Archive/Read/setting-up-your-GitHub-repository","Resource/RSS/CreatedModifiedDate","Resource/RSS/Description"],"tags":[],"content":"All of the content in your Quartz should go in the /content folder. The content for the home page of your Quartz lives in content/index.md. If you’ve setup Quartz already, this folder should already be initialized. Any Markdown in this folder will get processed by Quartz.\nIt is recommended that you use Obsidian as a way to edit and maintain your Quartz. It comes with a nice editor and graphical interface to preview, edit, and link your local files and attachments.\nGot everything setup? Let’s build and preview your Quartz locally!\nSyntax\nAs Quartz uses Markdown files as the main way of writing content, it fully supports Markdown syntax. By default, Quartz also ships with a few syntax extensions like Github Flavored Markdown (footnotes, strikethrough, tables, tasklists) and Obsidian Flavored Markdown (计算机组成原理, 处理器架构).\nAdditionally, Quartz also allows you to specify additional metadata in your notes called frontmatter.\ncontent/note.md---\ntitle: Example Title\ndraft: false\ntags:\n  - example-tag\n---\n \nThe rest of your content lives here. You can use **Markdown** here :)\nSome common frontmatter fields that are natively supported by Quartz:\n\ntitle: Title of the page. If it isn’t provided, Quartz will use the name of the file as the title.\ndescription: Description of the page used for link previews.\npermalink: A custom URL for the page that will remain constant even if the path to the file changes.\naliases: Other names for this note. This is a list of strings.\ntags: Tags for this note.\ndraft: Whether to publish the page or not. This is one way to make pages private in Quartz.\ndate: A string representing the day the note was published. Normally uses YYYY-MM-DD format.\n\nSee Frontmatter for a complete list of frontmatter.\nSyncing your Content\nWhen your Quartz is at a point you’re happy with, you can save your changes to GitHub.\nFirst, make sure you’ve already setup your GitHub repository and then do npx quartz sync.\nCustomization\nFrontmatter parsing for title, tags, aliases and cssclasses is a functionality of the Frontmatter plugin, date is handled by the CreatedModifiedDate plugin and description by the Description plugin. See the plugin pages for customization options."},"Archive/Read/build":{"slug":"Archive/Read/build","filePath":"Archive/Read/build.md","title":"Building your Quartz","links":["/","Archive/Read/hosting"],"tags":[],"content":"Once you’ve initialized Quartz, let’s see what it looks like locally:\nnpx quartz build --serve\nThis will start a local web server to run your Quartz on your computer. Open a web browser and visit http://localhost:8080/ to view it.\n\n\n                  \n                  Flags and options \n                  \n                \n\n\nFor full help options, you can run npx quartz build --help.\nMost of these have sensible defaults but you can override them if you have a custom setup:\n\n-d or --directory: the content folder. This is normally just content\n-v or --verbose: print out extra logging information\n-o or --output: the output folder. This is normally just public\n--serve: run a local hot-reloading server to preview your Quartz\n--port: what port to run the local preview server on\n--concurrency: how many threads to use to parse notes\n\n\n\n\n\n\n                  \n                  Not to be used for production \n                  \n                \n\n\nServe mode is intended for local previews only.\nFor production workloads, see the page on hosting.\n\n\n"},"Archive/Read/configuration":{"slug":"Archive/Read/configuration","filePath":"Archive/Read/configuration.md","title":"Configuration","links":["Archive/Read/layout","RSS-Feed","SPA-Routing","Area/EE/求职招聘","Area/EE/ARM","Archive/Read/hosting","Area/EE/英语","Area/EE/行业报告","Area/EE/STM32","tags/plugin/transformer","tags/plugin/filter","tags/plugin/emitter","Resource/RSS/ExplicitPublish","plugins/Latex","tags/Project","Project/AUTOSAR/应用领域"],"tags":[],"content":"Quartz is meant to be extremely configurable, even if you don’t know any coding. Most of the configuration you should need can be done by just editing quartz.config.ts or changing the layout in quartz.layout.ts.\n\n\n                  \n                  Tip\n                  \n                \n\n\nIf you edit Quartz configuration using a text-editor that has TypeScript language support like VSCode, it will warn you when you you’ve made an error in your configuration, helping you avoid configuration mistakes!\n\n\n\nThe configuration of Quartz can be broken down into two main parts:\nquartz.config.tsconst config: QuartzConfig = {\n  configuration: { ... },\n  plugins: { ... },\n}\nGeneral Configuration\nThis part of the configuration concerns anything that can affect the whole site. The following is a list breaking down all the things you can configure:\n\npageTitle: title of the site. This is also used when generating the RSS Feed for your site.\npageTitleSuffix: a string added to the end of the page title. This only applies to the browser tab title, not the title shown at the top of the page.\nenableSPA: whether to enable SPA Routing on your site.\nenablePopovers: whether to enable 求职招聘 on your site.\nanalytics: what to use for analytics on your site. Values can be\n\nnull: don’t use analytics;\n{ provider: &#039;google&#039;, tagId: &#039;&lt;your-google-tag&gt;&#039; }: use Google Analytics;\n{ provider: &#039;plausible&#039; } (managed) or { provider: &#039;plausible&#039;, host: &#039;https://&lt;your-plausible-host&gt;&#039; } (self-hosted, make sure to include the https:// protocol prefix): use Plausible;\n{ provider: &#039;umami&#039;, host: &#039;&lt;your-umami-host&gt;&#039;, websiteId: &#039;&lt;your-umami-website-id&gt;&#039; }: use Umami;\n{ provider: &#039;goatcounter&#039;, websiteId: &#039;my-goatcounter-id&#039; } (managed) or { provider: &#039;goatcounter&#039;, websiteId: &#039;my-goatcounter-id&#039;, host: &#039;my-goatcounter-domain.com&#039;, scriptSrc: &#039;my-url.to/counter.js&#039; } (self-hosted) use GoatCounter;\n{ provider: &#039;posthog&#039;, apiKey: &#039;&lt;your-posthog-project-apiKey&gt;&#039;, host: &#039;&lt;your-posthog-host&gt;&#039; }: use Posthog;\n{ provider: &#039;tinylytics&#039;, siteId: &#039;&lt;your-site-id&gt;&#039; }: use Tinylytics;\n{ provider: &#039;cabin&#039; } or { provider: &#039;cabin&#039;, host: &#039;cabin.example.com&#039; } (custom domain): use Cabin;\n{provider: &#039;clarity&#039;, projectId: &#039;&lt;your-clarity-id-code&#039; }: use Microsoft clarity. The project id can be found on top of the overview page.\n{ provider: &#039;matomo&#039;, siteId: &#039;&lt;your-matomo-id-code&#039;, host: &#039;matomo.example.com&#039; }: use Matomo, without protocol.\n\n\nlocale: used for ARM and date formatting\nbaseUrl: this is used for sitemaps and RSS feeds that require an absolute URL to know where the canonical ‘home’ of your site lives. This is normally the deployed URL of your site (e.g. quartz.jzhao.xyz for this site). Do not include the protocol (i.e. https://) or any leading or trailing slashes.\n\nThis should also include the subpath if you are hosting on GitHub pages without a custom domain. For example, if my repository is jackyzha0/quartz, GitHub pages would deploy to jackyzha0.github.io/quartz and the baseUrl would be jackyzha0.github.io/quartz.\nNote that Quartz 4 will avoid using this as much as possible and use relative URLs whenever it can to make sure your site works no matter where you end up actually deploying it.\n\n\nignorePatterns: a list of glob patterns that Quartz should ignore and not search through when looking for files inside the content folder. See 英语 for more details.\ndefaultDateType: whether to use created, modified, or published as the default date to display on pages and page listings.\ntheme: configure how the site looks.\n\ncdnCaching: if true (default), use Google CDN to cache the fonts. This will generally be faster. Disable (false) this if you want Quartz to download the fonts to be self-contained.\ntypography: what fonts to use. Any font available on Google Fonts works here.\n\ntitle: font for the title of the site (optional, same as header by default)\nheader: font to use for headers\ncode: font for inline and block quotes\nbody: font for everything\n\n\ncolors: controls the theming of the site.\n\nlight: page background\nlightgray: borders\ngray: graph links, heavier borders\ndarkgray: body text\ndark: header text and icons\nsecondary: link colour, current graph node\ntertiary: hover states and visited graph nodes\nhighlight: internal link background, highlighted text, highlighted lines of code\ntextHighlight: markdown highlighted text background\n\n\n\n\n\nPlugins\nYou can think of Quartz plugins as a series of transformations over content.\n\nquartz.config.tsplugins: {\n  transformers: [...],\n  filters: [...],\n  emitters: [...],\n}\n\nTransformers map over content (e.g. parsing frontmatter, generating a description)\nFilters filter content (e.g. filtering out drafts)\nEmitters reduce over content (e.g. creating an RSS feed or pages that list all files with a specific tag)\n\nYou can customize the behaviour of Quartz by adding, removing and reordering plugins in the transformers, filters and emitters fields.\n\n\n                  \n                  Note\n                  \n                \n\n\nEach node is modified by every transformer in order. Some transformers are position sensitive, so you may need to pay particular attention to whether they need to come before or after certain other plugins.\n\n\n\nYou should take care to add the plugin to the right entry corresponding to its plugin type. For example, to add the ExplicitPublish plugin (a Filter), you would add the following line:\nquartz.config.tsfilters: [\n  ...\n  Plugin.ExplicitPublish(),\n  ...\n],\nTo remove a plugin, you should remove all occurrences of it in the quartz.config.ts.\nTo customize plugins further, some plugins may also have their own configuration settings that you can pass in. If you do not pass in a configuration, the plugin will use its default settings.\nFor example, the Latex plugin allows you to pass in a field specifying the renderEngine to choose between Katex and MathJax.\nquartz.config.tstransformers: [\n  Plugin.FrontMatter(), // use default options\n  Plugin.Latex({ renderEngine: &quot;katex&quot; }), // set some custom options\n]\nSome plugins are included by default in the quartz.config.ts, but there are more available.\nYou can see a list of all plugins and their configuration options here.\nIf you’d like to make your own plugins, see the making custom plugins guide.\nFonts\nFonts can be specified as a string or a FontSpecification:\n// string\ntypography: {\n  header: &quot;Schibsted Grotesk&quot;,\n  ...\n}\n \n// FontSpecification\ntypography: {\n  header: {\n    name: &quot;Schibsted Grotesk&quot;,\n    weights: [400, 700],\n    includeItalic: true,\n  },\n  ...\n}"},"Archive/Read/hosting":{"slug":"Archive/Read/hosting","filePath":"Archive/Read/hosting.md","title":"Hosting","links":["Archive/Read/setting-up-your-GitHub-repository","RSS-Feed","Archive/Read/configuration"],"tags":[],"content":"Quartz effectively turns your Markdown files and other resources into a bundle of HTML, JS, and CSS files (a website!).\nHowever, if you’d like to publish your site to the world, you need a way to host it online. This guide will detail how to deploy with common hosting providers but any service that allows you to deploy static HTML should work as well.\n\n\n                  \n                  Warning\n                  \n                \n\n\nThe rest of this guide assumes that you’ve already created your own GitHub repository for Quartz. If you haven’t already, make sure you do so.\n\n\n\n\n\n                  \n                  Hint\n                  \n                \n\n\nSome Quartz features (like RSS Feed and sitemap generation) require baseUrl to be configured properly in your configuration to work properly. Make sure you set this before deploying!\n\n\n\nCloudflare Pages\n\nLog in to the Cloudflare dashboard and select your account.\nIn Account Home, select Workers &amp; Pages &gt; Create application &gt; Pages &gt; Connect to Git.\nSelect the new GitHub repository that you created and, in the Set up builds and deployments section, provide the following information:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfiguration optionValueProduction branchv4Framework presetNoneBuild commandnpx quartz buildBuild output directorypublic\nPress “Save and deploy” and Cloudflare should have a deployed version of your site in about a minute. Then, every time you sync your Quartz changes to GitHub, your site should be updated.\nTo add a custom domain, check out Cloudflare’s documentation.\n\n\n                  \n                  Warning\n                  \n                \n\n\nCloudflare Pages performs a shallow clone by default, so if you rely on git for timestamps, it is recommended that you add git fetch --unshallow &amp;&amp; to the beginning of the build command (e.g., git fetch --unshallow &amp;&amp; npx quartz build).\n\n\n\nGitHub Pages\nIn your local Quartz, create a new file quartz/.github/workflows/deploy.yml.\nquartz/.github/workflows/deploy.ymlname: Deploy Quartz site to GitHub Pages\n \non:\n  push:\n    branches:\n      - v4\n \npermissions:\n  contents: read\n  pages: write\n  id-token: write\n \nconcurrency:\n  group: &quot;pages&quot;\n  cancel-in-progress: false\n \njobs:\n  build:\n    runs-on: ubuntu-22.04\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0 # Fetch all history for git info\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 22\n      - name: Install Dependencies\n        run: npm ci\n      - name: Build Quartz\n        run: npx quartz build\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v3\n        with:\n          path: public\n \n  deploy:\n    needs: build\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4\nThen:\n\nHead to “Settings” tab of your forked repository and in the sidebar, click “Pages”. Under “Source”, select “GitHub Actions”.\nCommit these changes by doing npx quartz sync. This should deploy your site to &lt;github-username&gt;.github.io/&lt;repository-name&gt;.\n\n\n\n                  \n                  Hint\n                  \n                \n\n\nIf you get an error about not being allowed to deploy to github-pages due to environment protection rules, make sure you remove any existing GitHub pages environments.\nYou can do this by going to your Settings page on your GitHub fork and going to the Environments tab and pressing the trash icon. The GitHub action will recreate the environment for you correctly the next time you sync your Quartz.\n\n\n\n\n\n                  \n                  Info\n                  \n                \n\n\nQuartz generates files in the format of file.html instead of file/index.html which means the trailing slashes for non-folder paths are dropped. As GitHub pages does not do this redirect, this may cause existing links to your site that use trailing slashes to break. If not breaking existing links is important to you (e.g. you are migrating from Quartz 3), consider using Cloudflare Pages.\n\n\n\nCustom Domain\nHere’s how to add a custom domain to your GitHub pages deployment.\n\nHead to the “Settings” tab of your forked repository.\nIn the “Code and automation” section of the sidebar, click “Pages”.\nUnder “Custom Domain”, type your custom domain and click “Save”.\nThis next step depends on whether you are using an apex domain (example.com) or a subdomain (subdomain.example.com).\n\nIf you are using an apex domain, navigate to your DNS provider and create an A record that points your apex domain to GitHub’s name servers which have the following IP addresses:\n\n185.199.108.153\n185.199.109.153\n185.199.110.153\n185.199.111.153\n\n\nIf you are using a subdomain, navigate to your DNS provider and create a CNAME record that points your subdomain to the default domain for your site. For example, if you want to use the subdomain quartz.example.com for your user site, create a CNAME record that points quartz.example.com to &lt;github-username&gt;.github.io.\n\n\n\nThe above shows a screenshot of Google Domains configured for both jzhao.xyz (an apex domain) and quartz.jzhao.xyz (a subdomain).\nSee the GitHub documentation for more detail about how to setup your own custom domain with GitHub Pages.\n\n\n                  \n                  Why aren&#039;t my changes showing up? \n                  \n                \n\n\nThere could be many different reasons why your changes aren’t showing up but the most likely reason is that you forgot to push your changes to GitHub.\nMake sure you save your changes to Git and sync it to GitHub by doing npx quartz sync. This will also make sure to pull any updates you may have made from other devices so you have them locally.\n\n\n\nVercel\nFix URLs\nBefore deploying to Vercel, a vercel.json file is required at the root of the project directory. It needs to contain the following configuration so that URLs don’t require the .html extension:\nvercel.json{\n  &quot;cleanUrls&quot;: true\n}\nDeploy to Vercel\n\nLog in to the Vercel Dashboard and click “Add New…” &gt; Project\nImport the Git repository containing your Quartz project.\nGive the project a name (lowercase characters and hyphens only)\nCheck that these configuration options are set:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfiguration optionValueFramework PresetOtherRoot Directory./Build and Output Settings &gt; Build Commandnpx quartz build\n\nPress Deploy. Once it’s live, you’ll have 2 *.vercel.app URLs to view the page.\n\nCustom Domain\n\n\n                  \n                  Note\n                  \n                \n\n\nIf there is something already hosted on the domain, these steps will not work without replacing the previous content. As a workaround, you could use Next.js rewrites or use the next section to create a subdomain.\n\n\n\n\nUpdate the baseUrl in quartz.config.js if necessary.\nGo to the Domains - Dashboard page in Vercel.\nConnect the domain to Vercel\nPress “Add” to connect a custom domain to Vercel.\nSelect your Quartz repository and press Continue.\nEnter the domain you want to connect it to.\nFollow the instructions to update your DNS records until you see “Valid Configuration”\n\nUse a Subdomain\nUsing docs.example.com is an example of a subdomain. They’re a simple way of connecting multiple deployments to one domain.\n\nUpdate the baseUrl in quartz.config.js if necessary.\nEnsure your domain has been added to the Domains - Dashboard page in Vercel.\nGo to the Vercel Dashboard and select your Quartz project.\nGo to the Settings tab and then click Domains in the sidebar\nEnter your subdomain into the field and press Add\n\nNetlify\n\nLog in to the Netlify dashboard and click “Add new site”.\nSelect your Git provider and repository containing your Quartz project.\nUnder “Build command”, enter npx quartz build.\nUnder “Publish directory”, enter public.\nPress Deploy. Once it’s live, you’ll have a *.netlify.app URL to view the page.\nTo add a custom domain, check “Domain management” in the left sidebar, just like with Vercel.\n\nGitLab Pages\nIn your local Quartz, create a new file .gitlab-ci.yml.\n.gitlab-ci.ymlstages:\n  - build\n  - deploy\n \nimage: node:22\ncache: # Cache modules in between jobs\n  key: $CI_COMMIT_REF_SLUG\n  paths:\n    - .npm/\n \nbuild:\n  stage: build\n  rules:\n    - if: &#039;$CI_COMMIT_REF_NAME == &quot;v4&quot;&#039;\n  before_script:\n    - hash -r\n    - npm ci --cache .npm --prefer-offline\n  script:\n    - npx quartz build\n  artifacts:\n    paths:\n      - public\n  tags:\n    - gitlab-org-docker\n \npages:\n  stage: deploy\n  rules:\n    - if: &#039;$CI_COMMIT_REF_NAME == &quot;v4&quot;&#039;\n  script:\n    - echo &quot;Deploying to GitLab Pages...&quot;\n  artifacts:\n    paths:\n      - public\nWhen .gitlab-ci.yaml is committed, GitLab will build and deploy the website as a GitLab Page. You can find the url under Deploy &gt; Pages in the sidebar.\nBy default, the page is private and only visible when logged in to a GitLab account with access to the repository but can be opened in the settings under Deploy → Pages.\nSelf-Hosting\nCopy the public directory to your web server and configure it to serve the files. You can use any web server to host your site. Since Quartz generates links that do not include the .html extension, you need to let your web server know how to deal with it.\nUsing Nginx\nHere’s an example of how to do this with Nginx:\nnginx.confserver {\n    listen 80;\n    server_name example.com;\n    root /path/to/quartz/public;\n    index index.html;\n    error_page 404 /404.html;\n \n    location / {\n        try_files $uri $uri.html $uri/ =404;\n    }\n}\nUsing Apache\nHere’s an example of how to do this with Apache:\n.htaccessRewriteEngine On\n \nErrorDocument 404 /404.html\n \n# Rewrite rule for .html extension removal (with directory check)\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{DOCUMENT_ROOT}/%{REQUEST_URI}.html -f\nRewriteRule ^(.*)$ $1.html [L]\n \n# Handle directory requests explicitly\nRewriteCond %{REQUEST_FILENAME} -d\nRewriteRule ^(.*)/$ $1/index.html [L]\nDon’t forget to activate brotli / gzip compression.\nUsing Caddy\nHere’s and example of how to do this with Caddy:\nCaddyfileexample.com {\n    root * /path/to/quartz/public\n    try_files {path} {path}.html {path}/ =404\n    file_server\n    encode gzip\n \n    handle_errors {\n        rewrite * /{err.status_code}.html\n        file_server\n    }\n}"},"Archive/Read/layout-components":{"slug":"Archive/Read/layout-components","filePath":"Archive/Read/layout-components.md","title":"Higher-Order Layout Components","links":[],"tags":[],"content":"Quartz provides several higher-order components that help with layout composition and responsive design. These components wrap other components to add additional functionality or modify their behavior.\nFlex Component\nThe Flex component creates a flexible box layout that can arrange child components in various ways. It’s particularly useful for creating responsive layouts and organizing components in rows or columns.\ntype FlexConfig = {\n  components: {\n    Component: QuartzComponent\n    grow?: boolean // whether component should grow to fill space\n    shrink?: boolean // whether component should shrink if needed\n    basis?: string // initial main size of the component\n    order?: number // order in flex container\n    align?: &quot;start&quot; | &quot;end&quot; | &quot;center&quot; | &quot;stretch&quot; // cross-axis alignment\n    justify?: &quot;start&quot; | &quot;end&quot; | &quot;center&quot; | &quot;between&quot; | &quot;around&quot; // main-axis alignment\n  }[]\n  direction?: &quot;row&quot; | &quot;row-reverse&quot; | &quot;column&quot; | &quot;column-reverse&quot;\n  wrap?: &quot;nowrap&quot; | &quot;wrap&quot; | &quot;wrap-reverse&quot;\n  gap?: string\n}\nExample Usage\nComponent.Flex({\n  components: [\n    {\n      Component: Component.Search(),\n      grow: true, // Search will grow to fill available space\n    },\n    { Component: Component.Darkmode() }, // Darkmode keeps its natural size\n  ],\n  direction: &quot;row&quot;,\n  gap: &quot;1rem&quot;,\n})\n\n\n                  \n                  Overriding behavior \n                  \n                \n\n\nComponents inside Flex get an additional CSS class flex-component that add the display: flex property. If you want to override this behavior, you can add a display property to the component’s CSS class in your custom CSS file.\n.flex-component {\n  display: block; // or any other display type\n}\n\n\n\nMobileOnly Component\nThe MobileOnly component is a wrapper that makes its child component only visible on mobile devices. This is useful for creating responsive layouts where certain components should only appear on smaller screens.\nExample Usage\nComponent.MobileOnly(Component.Spacer())\nDesktopOnly Component\nThe DesktopOnly component is the counterpart to MobileOnly. It makes its child component only visible on desktop devices. This helps create responsive layouts where certain components should only appear on larger screens.\nExample Usage\nComponent.DesktopOnly(Component.TableOfContents())\nConditionalRender Component\nThe ConditionalRender component is a wrapper that conditionally renders its child component based on a provided condition function. This is useful for creating dynamic layouts where components should only appear under certain conditions.\ntype ConditionalRenderConfig = {\n  component: QuartzComponent\n  condition: (props: QuartzComponentProps) =&gt; boolean\n}\nExample Usage\nComponent.ConditionalRender({\n  component: Component.Search(),\n  condition: (props) =&gt; props.displayClass !== &quot;fullpage&quot;,\n})\nThe example above would only render the Search component when the page is not in fullpage mode.\nComponent.ConditionalRender({\n  component: Component.Breadcrumbs(),\n  condition: (page) =&gt; page.fileData.slug !== &quot;index&quot;,\n})\nThe example above would hide breadcrumbs on the root index.md page."},"Archive/Read/layout":{"slug":"Archive/Read/layout","filePath":"Archive/Read/layout.md","title":"Layout","links":["component","Archive/Read/layout-components","Project/AUTOSAR/方法论","Archive/Read/configuration"],"tags":[],"content":"Certain emitters may also output HTML files. To enable easy customization, these emitters allow you to fully rearrange the layout of the page. The default page layouts can be found in quartz.layout.ts.\nEach page is composed of multiple different sections which contain QuartzComponents. The following code snippet lists all of the valid sections that you can add components to:\nquartz/cfg.tsexport interface FullPageLayout {\n  head: QuartzComponent // single component\n  header: QuartzComponent[] // laid out horizontally\n  beforeBody: QuartzComponent[] // laid out vertically\n  pageBody: QuartzComponent // single component\n  afterBody: QuartzComponent[] // laid out vertically\n  left: QuartzComponent[] // vertical on desktop and tablet, horizontal on mobile\n  right: QuartzComponent[] // vertical on desktop, horizontal on tablet and mobile\n  footer: QuartzComponent // single component\n}\nThese correspond to following parts of the page:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLayoutPreviewDesktop (width &gt; 1200px)Tablet (800px &lt; width &lt; 1200px)Mobile (width &lt; 800px)\n\n\n                  \n                  Note\n                  \n                \n\n\nThere are two additional layout fields that are not shown in the above diagram.\n\nhead is a single component that renders the &lt;head&gt; tag in the HTML. This doesn’t appear visually on the page and is only is responsible for metadata about the document like the tab title, scripts, and styles.\nheader is a set of components that are laid out horizontally and appears before the beforeBody section. This enables you to replicate the old Quartz 3 header bar where the title, search bar, and dark mode toggle. By default, Quartz 4 doesn’t place any components in the header.\n\n\n\n\nQuartz components, like plugins, can take in additional properties as configuration options. If you’re familiar with React terminology, you can think of them as Higher-order Components.\nSee a list of all the components for all available components along with their configuration options. Additionally, Quartz provides several built-in higher-order components for layout composition - see layout-components for more details.\nYou can also checkout the guide on 方法论 if you’re interested in further customizing the behaviour of Quartz.\nLayout breakpoints\nQuartz has different layouts depending on the width the screen viewing the website.\nThe breakpoints for layouts can be configured in variables.scss.\n\nmobile: screen width below this size will use mobile layout.\ndesktop: screen width above this size will use desktop layout.\nScreen width between mobile and desktop width will use the tablet layout.\n\n$breakpoints: (\n  mobile: 800px,\n  desktop: 1200px,\n);\nStyle\nMost meaningful style changes like colour scheme and font can be done simply through the general configuration options. However, if you’d like to make more involved style changes, you can do this by writing your own styles. Quartz 4, like Quartz 3, uses Sass for styling.\nYou can see the base style sheet in quartz/styles/base.scss and write your own in quartz/styles/custom.scss.\n\n\n                  \n                  Note\n                  \n                \n\n\nSome components may provide their own styling as well! For example, quartz/components/Darkmode.tsx imports styles from quartz/components/styles/darkmode.scss. If you’d like to customize styling for a specific component, double check the component definition to see how its styles are defined.\n\n\n"},"Archive/Read/migrating-from-Quartz-3":{"slug":"Archive/Read/migrating-from-Quartz-3","filePath":"Archive/Read/migrating from Quartz 3.md","title":"Migrating from Quartz 3","links":["Archive/Read/configuration","Archive/Read/hosting","Area/EE/CPP","Project/AUTOSAR/方法论"],"tags":[],"content":"As you already have Quartz locally, you don’t need to fork or clone it again. Simply just checkout the alpha branch, install the dependencies, and import your old vault.\ngit fetch\ngit checkout v4\ngit pull upstream v4\nnpm i\nnpx quartz create\nIf you get an error like fatal: &#039;upstream&#039; does not appear to be a git repository, make sure you add upstream as a remote origin:\ngit remote add upstream github.com/jackyzha0/quartz.git\nWhen running npx quartz create, you will be prompted as to how to initialize your content folder. Here, you can choose to import or link your previous content folder and Quartz should work just as you expect it to.\n\n\n                  \n                  Note\n                  \n                \n\n\nIf the existing content folder you’d like to use is at the same path on a different branch, clone the repo again somewhere at a different path in order to use it.\n\n\n\nKey changes\n\nRemoving Hugo and hugo-obsidian: Hugo worked well for earlier versions of Quartz but it also made it hard for people outside of the Golang and Hugo communities to fully understand what Quartz was doing under the hood and be able to properly customize it to their needs. Quartz 4 now uses a Node-based static-site generation process which should lead to a much more helpful error messages and an overall smoother user experience.\nFull-hot reload: The many rough edges of how hugo-obsidian integrated with Hugo meant that watch mode didn’t re-trigger hugo-obsidian to update the content index. This lead to a lot of weird cases where the watch mode output wasn’t accurate. Quartz 4 now uses a cohesive parse, filter, and emit pipeline which gets run on every change so hot-reloads are always accurate.\nReplacing Go template syntax with JSX: Quartz 3 used Go templates to create layouts for pages. However, the syntax isn’t great for doing any sort of complex rendering (like text processing) and it got very difficult to make any meaningful layout changes to Quartz 3. Quartz 4 uses an extension of JavaScript syntax called JSX which allows you to write layout code that looks like HTML in JavaScript which is significantly easier to understand and maintain.\nA new extensible configuration and plugin system: Quartz 3 was hard to configure without technical knowledge of how Hugo’s partials worked. Extensions were even hard to make. Quartz 4’s configuration and plugin system is designed to be extended by users while making updating to new versions of Quartz easy.\n\nThings to update\n\nYou will need to update your deploy scripts. See the hosting guide for more details.\nEnsure that your default branch on GitHub is updated from hugo to v4.\nFolder and tag listings have also changed.\n\nFolder descriptions should go under content/&lt;folder-name&gt;/index.md where &lt;folder-name&gt; is the name of the folder.\nTag descriptions should go under content/tags/&lt;tag-name&gt;.md where &lt;tag-name&gt; is the name of the tag.\n\n\nSome HTML layout may not be the same between Quartz 3 and Quartz 4. If you depended on a particular HTML hierarchy or class names, you may need to update your custom CSS to reflect these changes.\nIf you customized the layout of Quartz 3, you may need to translate these changes from Go templates back to JSX as Quartz 4 no longer uses Hugo. For components, check out the guide on 方法论 for more details on this.\n"},"Archive/Read/philosophy":{"slug":"Archive/Read/philosophy","filePath":"Archive/Read/philosophy.md","title":"Philosophy of Quartz","links":[],"tags":[],"content":"A garden should be a true hypertext\n\nThe garden is the web as topology. Every walk through the garden creates new paths, new meanings, and when we add things to the garden we add them in a way that allows many future, unpredicted relationships.\n(The Garden and the Stream)\n\nThe problem with the file cabinet is that it focuses on efficiency of access and interoperability rather than generativity and creativity. Thinking is not linear, nor is it hierarchical. In fact, not many things are linear or hierarchical at all. Then why is it that most tools and thinking strategies assume a nice chronological or hierarchical order for my thought processes?\nThe ideal tool for thought for me would embrace the messiness of my mind, and organically help insights emerge from chaos instead of forcing an artificial order. A rhizomatic, not arboresecent, form of note taking.\nMy goal with a digital garden is not purely as an organizing system and information store (though it works nicely for that). I want my digital garden to be a playground for new ways ideas can connect together. As a result, existing formal organizing systems like Zettelkasten or the hierarchical folder structures of Notion don’t work well for me. There is way too much upfront friction that by the time I’ve thought about how to organize my thought into folders categories, I’ve lost it.\nQuartz embraces the inherent rhizomatic and web-like nature of our thinking and tries to encourage note-taking in a similar form.\n\nA garden should be shared\nThe goal of digital gardening should be to tap into your network’s collective intelligence to create constructive feedback loops. If done well, I have a shareable representation of my thoughts that I can send out into the world and people can respond. Even for my most half-baked thoughts, this helps me create a feedback cycle to strengthen and fully flesh out that idea.\nQuartz is designed first and foremost as a tool for publishing digital gardens to the web. To me, digital gardening is not just passive knowledge collection. It’s a form of expression and sharing.\n\n“[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.”\n— Richard Hamming\n\nThe goal of Quartz is to make sharing your digital garden free and simple.\n\nA garden should be your own\nAt its core, Quartz is designed to be easy to use enough for non-technical people to get going but also powerful enough that senior developers can tweak it to work how they’d like it to work.\n\nIf you like the default configuration of Quartz and just want to change the content, the only thing that you need to change is the contents of the content folder.\nIf you’d like to make basic configuration tweaks but don’t want to edit source code, one can tweak the plugins and components in quartz.config.ts and quartz.layout.ts in a guided manner to their liking.\nIf you’d like to tweak the actual source code of the underlying plugins, components, or even build process, Quartz purposefully ships its full source code to the end user to allow customization at this level too.\n\nMost software either confines you to either\n\nMakes it easy to tweak content but not the presentation\nGives you too many knobs to tune the presentation without good opinionated defaults\n\nQuartz should feel powerful but ultimately be an intuitive tool fully within your control. It should be a piece of agentic software. Ultimately, it should have the right affordances to nudge users towards good defaults but never dictate what the ‘correct’ way of using it is."},"Archive/Read/setting-up-your-GitHub-repository":{"slug":"Archive/Read/setting-up-your-GitHub-repository","filePath":"Archive/Read/setting up your GitHub repository.md","title":"Setting up your GitHub repository","links":["/"],"tags":[],"content":"First, make sure you have Quartz cloned and setup locally.\nThen, create a new repository on GitHub.com. Do not initialize the new repository with README, license, or gitignore files.\n\nAt the top of your repository on GitHub.com’s Quick Setup page, click the clipboard to copy the remote repository URL.\n\nIn your terminal of choice, navigate to the root of your Quartz folder. Then, run the following commands, replacing REMOTE-URL with the URL you just copied from the previous step.\n# list all the repositories that are tracked\ngit remote -v\n \n# if the origin doesn&#039;t match your own repository, set your repository as the origin\ngit remote set-url origin REMOTE-URL\n \n# if you don&#039;t have upstream as a remote, add it so updates work\ngit remote add upstream github.com/jackyzha0/quartz.git\nThen, you can sync the content to upload it to your repository. This is a helper command that will do the initial push of your content to your repository.\nnpx quartz sync --no-pull\n\n\n                  \n                   fatal: --[no-]autostash option is only valid with --rebase\n                  \n                \n\n\nYou may have an outdated version of git. Updating git should fix this issue.\n\n\n\n\n\n                  \n                   fatal: The remote end hung up unexpectedly\n                  \n                \n\n\nIt might be due to Git’s default buffer size. You can fix it by increasing the buffer with this command:\ngit config http.postBuffer 524288000\n\n\n\nIn future updates, you can simply run npx quartz sync every time you want to push updates to your repository.\n\n\n                  \n                  Flags and options \n                  \n                \n\n\nFor full help options, you can run npx quartz sync --help.\nMost of these have sensible defaults but you can override them if you have a custom setup:\n\n-d or --directory: the content folder. This is normally just content\n-v or --verbose: print out extra logging information\n--commit or --no-commit: whether to make a git commit for your changes\n--push or --no-push: whether to push updates to your GitHub fork of Quartz\n--pull or --no-pull: whether to try and pull in any updates from your GitHub fork (i.e. from other devices) before pushing\n\n\n\n"},"Archive/Read/showcase":{"slug":"Archive/Read/showcase","filePath":"Archive/Read/showcase.md","title":"Quartz Showcase","links":[],"tags":[],"content":"Want to see what Quartz can do? Here are some cool community gardens:\n\nQuartz Documentation (this site!)\nJacky Zhao’s Garden\nAaron Pham’s Garden\nThe Pond\nEilleen’s Everything Notebook\nMorrowind Modding Wiki\nStanford CME 302 Numerical Linear Algebra\nSocratica Toolbox\nA Pattern Language - Christopher Alexander (Architecture)\nSideny’s 3D Artist’s Handbook\nBrandon Boswell’s Garden\nData Engineering Vault: A Second Brain Knowledge Network\n🪴Aster’s notebook\nGatekeeper Wiki\nEllie’s Notes\nEledah’s Crystalline\n🌓 Projects &amp; Privacy - FOSS, tech, law\n"},"Archive/Read/upgrading":{"slug":"Archive/Read/upgrading","filePath":"Archive/Read/upgrading.md","title":"Upgrading Quartz","links":["Archive/Read/migrating-from-Quartz-3"],"tags":[],"content":"\n\n                  \n                  Note\n                  \n                \n\n\nThis is specifically a guide for upgrading Quartz 4 version to a more recent update. If you are coming from Quartz 3, check out the migration guide for more info.\n\n\n\nTo fetch the latest Quartz updates, simply run\nnpx quartz update\nAs Quartz uses git under the hood for versioning, updating effectively ‘pulls’ in the updates from the official Quartz GitHub repository. If you have local changes that might conflict with the updates, you may need to resolve these manually yourself (or, pull manually using git pull origin upstream).\n\n\n                  \n                  Hint\n                  \n                \n\n\nQuartz will try to cache your content before updating to try and prevent merge conflicts. If you get a conflict mid-merge, you can stop the merge and then run npx quartz restore to restore your content from the cache.\n\n\n\nIf you have the GitHub desktop app, this will automatically open to help you resolve the conflicts. Otherwise, you will need to resolve this in a text editor like VSCode. For more help on resolving conflicts manually, check out the GitHub guide on resolving merge conflicts."},"Archive/index":{"slug":"Archive/index","filePath":"Archive/index.md","title":"Archive","links":[],"tags":[],"content":""},"Area/AI/index":{"slug":"Area/AI/index","filePath":"Area/AI/index.md","title":"AI","links":[],"tags":["AI"],"content":""},"Area/Area":{"slug":"Area/Area","filePath":"Area/Area.md","title":"Area","links":["Area/EE/EE","Area/EE/C语言","Area/EE/操作系统","Area/KM/数字花园"],"tags":[],"content":"\n\nEE\n\nEE\nC语言\n操作系统\n\n\nKM\n\n数字花园\n\n\n"},"Area/CS/CS":{"slug":"Area/CS/CS","filePath":"Area/CS/CS.md","title":"CS","links":["Area/CS/必学工具","Area/EE/电子基础","Area/EE/数据结构与算法"],"tags":["Area","CS"],"content":"\nflowchart TD\nA[CS自学路径] --&gt; B[阶段一：编程与导论]\nA --&gt; C[阶段二：核心基础]\nA --&gt; D[阶段三：系统基础]\nA --&gt; E[阶段四：进阶领域]\nA --&gt; F[实践与社区]\n\nB --&gt; B1[编程入门&lt;br&gt;（Python/Java）]\nB --&gt; B2[计算机导论&lt;br&gt;（CS50）]\n\nB2 --&gt; C\nC --&gt; C1[数据结构与算法]\nC --&gt; C2[计算机组成&lt;br&gt;（CSAPP）]\nC --&gt; C3[操作系统&lt;br&gt;（OSTEP）]\nC --&gt; C4[计算机网络&lt;br&gt;（自顶向下方法）]\n\nC2 --&gt; D\nD --&gt; D1[编译原理]\nD --&gt; D2[数据库系统]\n\nD1 --&gt; E\nD2 --&gt; E\nE --&gt; E1[人工智能]\nE --&gt; E2[机器学习]\nE --&gt; E3[计算机图形学]\nE --&gt; E4[分布式系统]\n\nB1 --&gt; F\nC1 --&gt; F\nE2 --&gt; F\nF --&gt; F1[LeetCode刷题]\nF --&gt; F2[个人项目]\nF --&gt; F3[参与开源]\nF --&gt; F4[技术博客/社区]\n\n\n\n\n\n                  \n                  CS \n                  \n                \n\n\n来源：csdiy.wiki/\n这份指南旨在模拟一个完整的大学计算机科学本科课程体系，并全部由可供自学的优质在线资源组成。它遵循“先广后深”的原则，帮你建立扎实的计算机科学知识体系:\n\n必学工具\n好书推荐\n数学基础\n数学进阶\n编程入门\n电子基础\n数据结构与算法\n软件工程\n计算机系统基础\n体系结构\n操作系统\n并行与分布式系统\n计算机系统安全\n计算机网络\n数据库系统\n编译原理\n编程语言设计与分析\n计算机图形学\nWeb开发\n数据科学\n人工智能\n机器学习\n机器学习系统\n深度学习\n深度生成模型\n机器学习进阶\n\n\n\n"},"Area/CS/必学工具":{"slug":"Area/CS/必学工具","filePath":"Area/CS/必学工具.md","title":"必学工具","links":[],"tags":["Area","CS"],"content":"\nVIM\nEmacs\nGit\nGithub\nGNU Make\nCMake\n"},"Area/EE/51单片机":{"slug":"Area/EE/51单片机","filePath":"Area/EE/51单片机.md","title":"51单片机","links":["Area/EE/单片机介绍","Area/EE/看门狗"],"tags":["Area","单片机"],"content":"\n\n51单片机学习指南\n\n\n\n                  \n                  Todo\n                  \n                \n\n\nAliases: “todo”\n\n\n\n\n\n                  \n                  51单片机 \n                  \n                \n\n\n\n1.单片机介绍\n2.环境搭建\n3.创建工程\n4.固件烧录\n5.点亮LED\n6.按键\n7.数码管\n8.中断\n9.定时器\n10.串口通讯\n11.蜂鸣器\n12.IIC、温度传感器\n13.PWM 呼吸灯 直流电机\n14.看门狗\n\n\n\n"},"Area/EE/ARM":{"slug":"Area/EE/ARM","filePath":"Area/EE/ARM.md","title":"ARM","links":["Archive/Read/configuration"],"tags":["Area","ARM"],"content":"Internationalization allows users to translate text in the Quartz interface into various supported languages without needing to make extensive code changes. This can be changed via the locale configuration field in quartz.config.ts.\nThe locale field generally follows a certain format: {language}-{REGION}\n\n{language} is usually a 2-letter lowercase language code.\n{REGION} is usually a 2-letter uppercase region code\n\n\n\n                  \n                  Interested in contributing? \n                  \n                \n\n\nWe gladly welcome translation PRs! To contribute a translation, do the following things:\n\nIn the quartz/i18n/locales folder, copy the en-US.ts file.\nRename it to {language}-{REGION}.ts so it matches a locale of the format shown above.\nFill in the translations!\nAdd the entry under TRANSLATIONS in quartz/i18n/index.ts.\n\n\n\n"},"Area/EE/CPP":{"slug":"Area/EE/CPP","filePath":"Area/EE/CPP.md","title":"CPP","links":["advanced/","Archive/Read/authoring-content","tags/Project","tags/component","Resource/RSS/FolderPage","Resource/GitHub/TagPage"],"tags":["AREA","Program","component"],"content":"Quartz emits listing pages for any folders and tags you have.\nFolder Listings\nQuartz will generate an index page for all the pages under that folder. This includes any content that is multiple levels deep.\nAdditionally, Quartz will also generate pages for subfolders. Say you have a note in a nested folder content/abc/def/note.md. Then Quartz would generate a page for all the notes under abc and a page for all the notes under abc/def.\nYou can link to the folder listing by referencing its name, plus a trailing slash, like this: [[advanced/]] (results in advanced).\nBy default, Quartz will title the page Folder: &lt;folder name&gt; and no description. You can override this by creating an index.md file in the folder with the title frontmatter field. Any content you write in this file will also be used in the folder description.\nFor example, for the folder content/posts, you can add another file content/posts/index.md to add a specific description for it.\nTag Listings\nQuartz will also create an index page for each unique tag in your vault and render a list of all notes with that tag.\nQuartz also supports tag hierarchies as well (e.g. plugin/emitter) and will also render a separate tag page for each level of the tag hierarchy. It will also create a default global tag index page at /tags that displays a list of all the tags in your Quartz.\nYou can link to the tag listing by referencing its name with a tag/ prefix, like this: [[tags/plugin]] (results in Project).\nAs with folder listings, you can also provide a description and title for a tag page by creating a file for each tag. For example, if you wanted to create a custom description for the component tag, you would create a file at content/tags/component.md with a title and description.\nCustomization\nQuartz allows you to define a custom sort ordering for content on both page types. The folder listings are a functionality of the FolderPage plugin, the tag listings of the TagPage plugin. See the plugin pages for customization options."},"Area/EE/C语言":{"slug":"Area/EE/C语言","filePath":"Area/EE/C语言.md","title":"C语言","links":[],"tags":["Area","Program"],"content":"\nC语言学习资源\n\n\n\n第一章 初识C语言\n第二章 C语言概述\n第三章 数据和C\n第四章 字符串和格式化输入/输出\n第五章 运算符、表达式和语句\n第六章 C控制语句：循环\n第七章 C控制语句：分支和跳转\n\n\n第一章 初识C语言\n\n\n                  \n                  Note\n                  \n                \n\n\n卡片笔记\n\n\n\n第二章 C语言概述\n第三章 数据和C\n第四章 字符串和格式化输入/输出\n第五章 运算符、表达式和语句\n第六章 C控制语句：循环\n第七章 C控制语句：分支和跳转"},"Area/EE/EE":{"slug":"Area/EE/EE","filePath":"Area/EE/EE.md","title":"EE","links":["Area/EE/电子基础","Area/EE/C语言","Area/EE/数据结构与算法","Area/EE/计算机组成原理","Area/EE/处理器架构","Area/EE/操作系统","Area/EE/计算机网络","Area/EE/常用芯片手册","Area/EE/测试","Area/EE/程序员修养","Area/EE/数学","Area/EE/设计模式","面向对象","Area/EE/CPP","Area/EE/工具","Area/EE/行业报告"],"tags":["Area","Electron"],"content":"\n\n                  \n                  Hint\n                  \n                \n\n\n来源：github.com/Poo1o/Embed-Books\n\n\n\n\n\n00-电子基础\n\n《电路·邱关源》\n\n\n01-C语言\n\n《C程序设计语言(K&amp;R)清晰中文版》\n《CPrimer_Plus第五版》\n\n\n02-数据结构与算法\n03-计算机组成原理\n04-处理器架构\n05-操作系统\n06-计算机网络\n07-常用芯片手册\n08-测试\n09-程序员修养\n10-数学\n11-设计模式\n12-面向对象\n13-CPP\n14-工具\n15-行业报告\n"},"Area/EE/Linux":{"slug":"Area/EE/Linux","filePath":"Area/EE/Linux.md","title":"Linux","links":["plugins/Latex"],"tags":["Area"],"content":"Quartz uses Katex by default to typeset both inline and block math expressions at build time.\nSyntax\nBlock Math\nBlock math can be rendered by delimiting math expression with $$.\n$$\nf(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi\n$$\n\nf(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi\n\\begin{aligned}\na &amp;= b + c \\\\ &amp;= e + f \\\\\n\\end{aligned}\n\\begin{bmatrix}\n1 &amp; 2 &amp; 3 \\\\\na &amp; b &amp; c\n\\end{bmatrix}\n\\begin{array}{rll}\nE \\psi &amp;= H\\psi &amp; \\text{Expanding the Hamiltonian Operator} \\\\\n&amp;= -\\frac{\\hbar^2}{2m}\\frac{\\partial^2}{\\partial x^2} \\psi + \\frac{1}{2}m\\omega x^2 \\psi &amp; \\text{Using the ansatz $\\psi(x) = e^{-kx^2}f(x)$, hoping to cancel the $x^2$ term} \\\\\n&amp;= -\\frac{\\hbar^2}{2m} [4k^2x^2f(x)+2(-2kx)f&#039;(x) + f&#039;&#039;(x)]e^{-kx^2} + \\frac{1}{2}m\\omega x^2 f(x)e^{-kx^2} &amp;\\text{Removing the $e^{-kx^2}$ term from both sides} \\\\\n&amp; \\Downarrow \\\\\nEf(x) &amp;= -\\frac{\\hbar^2}{2m} [4k^2x^2f(x)-4kxf&#039;(x) + f&#039;&#039;(x)] + \\frac{1}{2}m\\omega x^2 f(x) &amp; \\text{Choosing $k=\\frac{im}{2}\\sqrt{\\frac{\\omega}{\\hbar}}$ to cancel the $x^2$ term, via $-\\frac{\\hbar^2}{2m}4k^2=\\frac{1}{2}m \\omega$} \\\\\n&amp;= -\\frac{\\hbar^2}{2m} [-4kxf&#039;(x) + f&#039;&#039;(x)] \\\\\n\\end{array}\n\n\n                  \n                  Warn\n                  \n                \n\n\nDue to limitations in the underlying parsing library, block math in Quartz requires the $$ delimiters to be on newlines like above.\n\n\n\nInline Math\nSimilarly, inline math can be rendered by delimiting math expression with a single $. For example, $e^{i\\pi} = -1$ produces e^{i\\pi} = -1\nEscaping symbols\nThere will be cases where you may have more than one $ in a paragraph at once which may accidentally trigger MathJax/Katex.\nTo get around this, you can escape the dollar sign by doing \\$ instead.\nFor example:\n\nIncorrect: I have $1 and you have $2 produces I have 1 and you have 2\nCorrect: I have \\$1 and you have \\$2 produces I have $1 and you have $2\n\nUsing mhchem\nAdd the following import to the top of quartz/plugins/transformers/latex.ts (before all the other\nimports):\nquartz/plugins/transformers/latex.tsimport &quot;katex/contrib/mhchem&quot;\nCustomization\nLatex parsing is a functionality of the Latex plugin. See the plugin page for customization options."},"Area/EE/MCU":{"slug":"Area/EE/MCU","filePath":"Area/EE/MCU.md","title":"MCU","links":["Resource/GitHub/OxHugoFlavoredMarkdown"],"tags":["Area","MCU"],"content":"org-roam is a plain-text personal knowledge management system for emacs. ox-hugo is org exporter backend that exports org-mode files to Hugo compatible Markdown.\nBecause the Markdown generated by ox-hugo is not pure Markdown but Hugo specific, we need to transform it to fit into Quartz. This is done by the OxHugoFlavoredMarkdown plugin. Even though this plugin was written with ox-hugo in mind, it should work for any Hugo specific Markdown.\nquartz.config.tsplugins: {\n  transformers: [\n    Plugin.FrontMatter({ delims: &quot;+++&quot;, language: &quot;toml&quot; }), // if toml frontmatter\n    // ...\n    Plugin.OxHugoFlavouredMarkdown(),\n    Plugin.GitHubFlavoredMarkdown(),\n    // ...\n  ],\n},\nUsage\nQuartz by default doesn’t understand org-roam files as they aren’t Markdown. You’re responsible for using an external tool like ox-hugo to export the org-roam files as Markdown content to Quartz and managing the static assets so that they’re available in the final output.\nConfiguration\nThis functionality is provided by the OxHugoFlavoredMarkdown plugin. See the plugin page for customization options."},"Area/EE/RTOS":{"slug":"Area/EE/RTOS","filePath":"Area/EE/RTOS.md","title":"RTOS","links":["Area/EE/工业互联网","Resource/GitHub/ObsidianFlavoredMarkdown","Resource/GitHub/SyntaxHighlighting"],"tags":["feature/transformer"],"content":"Quartz supports Mermaid which allows you to add diagrams and charts to your notes. Mermaid supports a range of diagrams, such as flow charts, sequence diagrams, and timelines. This is enabled as a part of 工业互联网 and can be configured and enabled/disabled from that plugin.\nBy default, Quartz will render Mermaid diagrams to match the site theme.\n\n\n                  \n                  Warning\n                  \n                \n\n\nWondering why Mermaid diagrams may not be showing up even if you have them enabled? You may need to reorder your plugins so that ObsidianFlavoredMarkdown is after SyntaxHighlighting.\n\n\n\nSyntax\nTo add a Mermaid diagram, create a mermaid code block.\n```mermaid\nsequenceDiagram\n    Alice-&gt;&gt;+John: Hello John, how are you?\n    Alice-&gt;&gt;+John: John, can you hear me?\n    John--&gt;&gt;-Alice: Hi Alice, I can hear you!\n    John--&gt;&gt;-Alice: I feel great!\n```\n\nsequenceDiagram\n    Alice-&gt;&gt;+John: Hello John, how are you?\n    Alice-&gt;&gt;+John: John, can you hear me?\n    John--&gt;&gt;-Alice: Hi Alice, I can hear you!\n    John--&gt;&gt;-Alice: I feel great!\n"},"Area/EE/STM32":{"slug":"Area/EE/STM32","filePath":"Area/EE/STM32.md","title":"STM32","links":["Resource/GitHub/SyntaxHighlighting"],"tags":["AREA","ARM"],"content":"Syntax highlighting in Quartz is completely done at build-time. This means that Quartz only ships pre-calculated CSS to highlight the right words so there is no heavy client-side bundle that does the syntax highlighting.\nAnd, unlike some client-side highlighters, it has a full TextMate parser grammar instead of using Regexes, allowing for highly accurate code highlighting.\nIn short, it generates HTML that looks exactly like your code in an editor like VS Code. Under the hood, it’s powered by Rehype Pretty Code which uses Shiki.\n\n\n                  \n                  Warning\n                  \n                \n\n\nSyntax highlighting does have an impact on build speed if you have a lot of code snippets in your notes.\n\n\n\nFormatting\nText inside backticks on a line will be formatted like code.\n```ts\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n\n  return cleanPath + anchor\n}\n```\n\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n \n  return cleanPath + anchor\n}\nTitles\nAdd a file title to your code block, with text inside double quotes (&quot;&quot;):\n```js title=&quot;...&quot;\n\n```\n\nquartz/path.tsexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n \n  return cleanPath + anchor\n}\nLine highlighting\nPlace a numeric range inside {}.\n```js {1-3,4}\n\n```\n\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n \n  return cleanPath + anchor\n}\nWord highlighting\nA series of characters, like a literal regex.\n```js /useState/\nconst [age, setAge] = useState(50);\nconst [name, setName] = useState(&#039;Taylor&#039;);\n```\n\nconst [age, setAge] = useState(50)\nconst [name, setName] = useState(&quot;Taylor&quot;)\nInline Highlighting\nAppend {:lang} to the end of inline code to highlight it like a regular code block.\nThis is an array `[1, 2, 3]{:js}` of numbers 1 through 3.\n\nThis is an array [1, 2, 3] of numbers 1 through 3.\nLine numbers\nSyntax highlighting has line numbers configured automatically. If you want to start line numbers at a specific number, use showLineNumbers{number}:\n```js showLineNumbers{number}\n\n```\n\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n \n  return cleanPath + anchor\n}\nEscaping code blocks\nYou can format a codeblock inside of a codeblock by wrapping it with another level of backtick fences that has one more backtick than the previous fence.\n````\n```js /useState/\nconst [age, setAge] = useState(50);\nconst [name, setName] = useState(&#039;Taylor&#039;);\n```\n````\n\nCustomization\nSyntax highlighting is a functionality of the SyntaxHighlighting plugin. See the plugin page for customization options."},"Area/EE/X86":{"slug":"Area/EE/X86","filePath":"Area/EE/X86.md","title":"X86","links":[],"tags":["Area"],"content":""},"Area/EE/index":{"slug":"Area/EE/index","filePath":"Area/EE/index.md","title":"EE","links":["Area/EE/EE"],"tags":[],"content":"学习EE\nkanban\n  [1.电子基础]\n    [《电路_邱关源》]\n    [《模拟电子技术基础_童诗白》]\n    [《数字电子技术基础_阎石》]\n    [《图解数字电路》]\n  [2.C语言]\n    [《C程序设计语言K&amp;R清晰中文版》]\n    [《C_Primer_Plus_第五版》]\n    [《C和指针（第二版）》]\n    [《C陷阱与缺陷》]\n    [《经典C程序100例》]\n    [《C专家编程》]\n    [《彻底搞定C指针》]\n    [《短码之美：编程达人的心得技法》]\n  [3.数据结构与算法]\n    [《编程珠玑》]\n    [《经典算法大全_C语言描述》]\n    [《数据结构C语言版_严蔚敏_吴伟民》]\n    [《数据结构与算法分析：C语言描述_原书第2版_高清版》]\n    [《算法导论》]\n  [4.计算机组成原理]\n    [《编码：隐匿在计算机软硬件背后的语言》]\n  [5.处理器架构]\n    [ARM]\n    [RISC-V]\n\nkanban\n  [6.计算机网络]\n    [《计算机网络-自顶向下方法》]\n  [7.常用芯片手册]\n    [Design grammar]\n  [8.测试方法]\n    [Create parsing tests]\n  [9.程序员修养]\n    [define getData]\n  [10.数学]\n    [《数学之美》]\n\nkanban\n  [11.设计模式]\n    [《head_first_设计模式》]\n  [12.面向对象]\n    [《UML+OOPC嵌入式C语言开发精讲》]\n    [《深入浅出面向对象分析与设计》]\n  [13.C++]\n    [Create parsing tests]\n  [14.工具]\n    [define getData]\n  [15.行业报告]\n    [MCU]\n  [16.求职招聘]\n    [猎聘]\n  [17.常用软件]\n    [友善串口调试助手]\n  [18.35岁退休]\n    [《滴滴出行平台就业研究报告》]\n"},"Area/EE/人工智能":{"slug":"Area/EE/人工智能","filePath":"Area/EE/人工智能.md","title":"人工智能","links":["Resource/GitHub/RoamFlavoredMarkdown"],"tags":["EE","AI"],"content":"Roam Research is a note-taking tool that organizes your knowledge graph in a unique and interconnected way.\nQuartz supports transforming the special Markdown syntax from Roam Research (like {{[[components]]}} and other formatting) into\nregular Markdown via the RoamFlavoredMarkdown plugin.\nquartz.config.tsplugins: {\n  transformers: [\n    // ...\n    Plugin.RoamFlavoredMarkdown(),\n    Plugin.ObsidianFlavoredMarkdown(),\n    // ...\n  ],\n},\n\n\n                  \n                  Warning\n                  \n                \n\n\nAs seen above placement of Plugin.RoamFlavoredMarkdown() within quartz.config.ts is very important. It must come before Plugin.ObsidianFlavoredMarkdown().\n\n\n\nCustomization\nThis functionality is provided by the RoamFlavoredMarkdown plugin. See the plugin page for customization options."},"Area/EE/单片机介绍":{"slug":"Area/EE/单片机介绍","filePath":"Area/EE/单片机介绍.md","title":"单片机介绍","links":[],"tags":["Area","单片机"],"content":""},"Area/EE/处理器架构":{"slug":"Area/EE/处理器架构","filePath":"Area/EE/处理器架构.md","title":"处理器架构","links":["Resource/RSS/CrawlLinks","Area/EE/工业互联网"],"tags":[],"content":"Wikilinks were pioneered by earlier internet wikis to make it easier to write links across pages without needing to write Markdown or HTML links each time.\nQuartz supports Wikilinks by default and these links are resolved by Quartz using the CrawlLinks plugin. See the Obsidian Help page on Internal Links for more information on Wikilink syntax.\nThis is enabled as a part of 工业互联网 and can be configured and enabled/disabled from that plugin.\nSyntax\n\n[[Path to file]]: produces a link to Path to file.md (or Path-to-file.md) with the text Path to file\n[[Path to file | Here&#039;s the title override]]: produces a link to Path to file.md with the text Here&#039;s the title override\n[[Path to file#anchor|Anchor]]: produces a link to the anchor Anchor in the file Path to file.md\n[[Path to file#^block-ref|^block-ref]]: produces a link to the specific block block-ref in the file Path to file.md\n\nEmbeds\n\n![[Path to image]]: embeds an image into the page\n![[Path to image|100x145]]: embeds an image into the page with dimensions 100px by 145px\n![[Path to file]]: transclude an entire page\n![[Path to file#anchor|Anchor]]: transclude everything under the header Anchor\n![[Path to file#^b15695|^b15695]]: transclude block with ID ^b15695\n"},"Area/EE/工业互联网":{"slug":"Area/EE/工业互联网","filePath":"Area/EE/工业互联网.md","title":"工业互联网","links":["Resource/GitHub/ObsidianFlavoredMarkdown","Area/EE/处理器架构","Area/EE/RTOS","Resource/RSS/Frontmatter","Resource/RSS/CrawlLinks"],"tags":["feature/transformer"],"content":"Quartz was originally designed as a tool to publish Obsidian vaults as websites. Even as the scope of Quartz has widened over time, it hasn’t lost the ability to seamlessly interoperate with Obsidian.\nBy default, Quartz ships with the ObsidianFlavoredMarkdown plugin, which is a transformer plugin that adds support for Obsidian Flavored Markdown. This includes support for features like 处理器架构 and RTOS.\nIt also ships with support for frontmatter parsing with the same fields that Obsidian uses through the Frontmatter transformer plugin.\nFinally, Quartz also provides CrawlLinks plugin, which allows you to customize Quartz’s link resolution behaviour to match Obsidian.\nConfiguration\nThis functionality is provided by the ObsidianFlavoredMarkdown, Frontmatter and CrawlLinks plugins. See the plugin pages for customization options."},"Area/EE/工具":{"slug":"Area/EE/工具","filePath":"Area/EE/工具.md","title":"工具","links":["Archive/Read/configuration"],"tags":["Area","Tool"],"content":"Full-text search in Quartz is powered by Flexsearch. It’s fast enough to return search results in under 10ms for Quartzs as large as half a million words.\nIt can be opened by either clicking on the search bar or pressing ⌘/ctrl + K. The top 5 search results are shown on each query. Matching subterms are highlighted and the most relevant 30 words are excerpted. Clicking on a search result will navigate to that page.\nTo search content by tags, you can either press ⌘/ctrl + shift + K or start your query with # (e.g. #components).\nThis component is also keyboard accessible: Tab and Shift+Tab will cycle forward and backward through search results and Enter will navigate to the highlighted result (first result by default). You are also able to navigate search results using ArrowUp and ArrowDown.\n\n\n                  \n                  Info\n                  \n                \n\n\nSearch requires the ContentIndex emitter plugin to be present in the configuration.\n\n\n\nIndexing Behaviour\nBy default, it indexes every page on the site with Markdown syntax removed. This means link URLs for instance are not indexed.\nIt properly tokenizes Chinese, Korean, and Japenese characters and constructs separate indexes for the title, content and tags, weighing title matches above content matches.\nCustomization\n\nRemoving search: delete all usages of Component.Search() from quartz.layout.ts.\nComponent: quartz/components/Search.tsx\nStyle: quartz/components/styles/search.scss\nScript: quartz/components/scripts/search.inline.ts\n\nYou can edit contextWindowWords, numSearchResults or numTagResults to suit your needs\n\n\n"},"Area/EE/常用芯片手册":{"slug":"Area/EE/常用芯片手册","filePath":"Area/EE/常用芯片手册.md","title":"常用芯片手册","links":["Resource/GitHub/TableOfContents","Archive/Read/layout"],"tags":["Area","Chip","Manual"],"content":"Quartz can automatically generate a table of contents (TOC) from a list of headings on each page. It will also show you your current scrolling position on the page by highlighting headings you’ve scrolled through with a different color.\nYou can hide the TOC on a page by adding enableToc: false to the frontmatter for that page.\nBy default, the TOC shows all headings from H1 (# Title) to H3 (### Title) and is only displayed if there is more than one heading on the page.\nCustomization\nThe table of contents is a functionality of the TableOfContents plugin. See the plugin page for more customization options.\nIt also needs the TableOfContents component, which is displayed in the right sidebar by default. You can change this by customizing the layout. The TOC component can be configured with the layout parameter, which can either be modern (default) or legacy."},"Area/EE/操作系统":{"slug":"Area/EE/操作系统","filePath":"Area/EE/操作系统.md","title":"操作系统","links":[],"tags":["Area","OS"],"content":"概述\n在计算机中，操作系统是其最基本也是最为重要的基础性系统软件。从计算机用户的角度来说，计算机操作系统体现为其提供的各项服务；从程序员的角度来说，其主要是指用户登录的界面或者接口；如果从设计人员的角度来说，就是指各式各样模块和单元之间的联系。事实上，全新操作系统的设计和改良的关键工作就是对体系结构的设计，经过几十年以来的发展，计算机操作系统已经由一开始的简单控制循环体发展成为较为复杂的分布式操作系统，再加上计算机用户需求的愈发多样化，计算机操作系统已经成为既复杂而又庞大的计算机软件系统之一。\n\n\n                  \n                  操作系统 \n                  \n                \n\n\n\n第一章 操作系统引论\n第二章 进程的描述与控制\n第三章 处理机调度与死锁\n第四章 存储器管理\n第五章 虚拟存储器\n第六章 输入输出系统\n第七章 文件管理\n第八章 磁盘存储器的管理\n\n\n\n\n\n\n                  \n                  Behaviour of references \n                  \n                \n\n\nBy default, the references will be included at the end of the file. To control where the references to be included, uses [^ref]\nRefer to rehype-citation docs for more information.\n\n\n\n思维导图\nmindmap\n  root((Operating System Knowledge Base))\n\n    1. Course Notes\n      1.1. Handwritten Notes\n      1.2. Chapter 1 Introduction\n      1.3. Chapter 2 Process Control\n        1.3.1. Precedence Graph\n        1.3.2. Process States\n        1.3.3. PCB\n        1.3.4. Process Synchronization\n        1.3.5. Classical Problems\n      1.4. Chapter 3 Scheduling\n        1.4.1. Scheduling Algorithms\n        1.4.2. Deadlock\n      1.5. Chapter 4 Memory Management\n        1.5.1. Allocation Methods\n        1.5.2. Virtual Memory\n        1.5.3. Page Replacement\n      1.6. Chapter 5 Virtual Memory\n      1.7. Chapter 6 IO Systems\n      1.8. Chapter 7 File Management\n      1.9. Chapter 8 Disk Management\n\n    2. Lab Experiments\n      2.1. Linux Commands\n      2.2. Process Control\n      2.3. Thread Synchronization\n      2.4. Memory Management\n      2.5. File System\n      2.6. Disk Scheduling\n\n    3. Interview Preparation\n      3.1. Basic Concepts\n      3.2. Process Thread\n      3.3. Memory Management\n      3.4. File System\n      3.5. Deadlock\n      3.6. Device Management\n\n    4. Code Implementation\n      4.1. Process Schedule\n      4.2. Banker Algorithm\n      4.3. PV Operations\n      4.4. Page Replacement\n      4.5. Disk Schedule\n\n    5. Resources Usage\n      5.1. Repository URL\n      5.2. Clone Download\n      5.3. Read Notes\n      5.4. Compile Run\n"},"Area/EE/数字电路":{"slug":"Area/EE/数字电路","filePath":"Area/EE/数字电路.md","title":"数字电路","links":[],"tags":["component"],"content":"Reader Mode is a feature that allows users to focus on the content by hiding the sidebars and other UI elements. When enabled, it provides a clean, distraction-free reading experience.\nConfiguration\nReader Mode is enabled by default. To disable it, you can remove the component from your layout configuration in quartz.layout.ts:\n// Remove or comment out this line\nComponent.ReaderMode(),\nUsage\nThe Reader Mode toggle appears as a button with a book icon. When clicked:\n\nSidebars are hidden\nHovering over the content area reveals the sidebars temporarily\n\nUnlike Dark Mode, Reader Mode state is not persisted between page reloads but is maintained during SPA navigation within the site.\nCustomization\nYou can customize the appearance of Reader Mode through CSS variables and styles. The component uses the following classes:\n\n.readermode: The toggle button\n.readerIcon: The book icon\n[reader-mode=&quot;on&quot;]: Applied to the root element when Reader Mode is active\n\nExample customization in your custom CSS:\n.readermode {\n  // Customize the button\n  svg {\n    stroke: var(--custom-color);\n  }\n}"},"Area/EE/数学":{"slug":"Area/EE/数学","filePath":"Area/EE/数学.md","title":"数学","links":[],"tags":["Area","Math"],"content":""},"Area/EE/数据结构与算法":{"slug":"Area/EE/数据结构与算法","filePath":"Area/EE/数据结构与算法.md","title":"数据结构与算法","links":["Archive/Read/layout"],"tags":["Area","Computer"],"content":"Breadcrumbs provide a way to navigate a hierarchy of pages within your site using a list of its parent folders.\nBy default, the element at the very top of your page is the breadcrumb navigation bar (can also be seen at the top on this page!).\nCustomization\nMost configuration can be done by passing in options to Component.Breadcrumbs().\nFor example, here’s what the default configuration looks like:\nquartz.layout.tsComponent.Breadcrumbs({\n  spacerSymbol: &quot;❯&quot;, // symbol between crumbs\n  rootName: &quot;Home&quot;, // name of first/root element\n  resolveFrontmatterTitle: true, // whether to resolve folder names through frontmatter titles\n  showCurrentPage: true, // whether to display the current page in the breadcrumbs\n})\nWhen passing in your own options, you can omit any or all of these fields if you’d like to keep the default value for that field.\nYou can also adjust where the breadcrumbs will be displayed by adjusting the layout (moving Component.Breadcrumbs() up or down)\nWant to customize it even more?\n\nRemoving breadcrumbs: delete all usages of Component.Breadcrumbs() from quartz.layout.ts.\nComponent: quartz/components/Breadcrumbs.tsx\nStyle: quartz/components/styles/breadcrumbs.scss\nScript: inline at quartz/components/Breadcrumbs.tsx\n"},"Area/EE/新能源汽车":{"slug":"Area/EE/新能源汽车","filePath":"Area/EE/新能源汽车.md","title":"新能源汽车","links":["Resource/RSS/CustomOgImages","Archive/Read/authoring-content"],"tags":[],"content":"A lot of social media platforms can display a rich preview for your website when sharing a link (most notably, a cover image, a title and a description).\nQuartz can also dynamically generate and use new cover images for every page to be used in link previews on social media for you.\nShowcase\nAfter enabling the CustomOgImages emitter plugin, the social media link preview for Authoring Content looks like this:\n\n\n\n\n\n\n\n\n\n\n\n\n\nLightDark\nConfiguration\nThis functionality is provided by the CustomOgImages plugin. See the plugin page for customization options."},"Area/EE/模拟电路":{"slug":"Area/EE/模拟电路","filePath":"Area/EE/模拟电路.md","title":"模拟电路","links":["Archive/Read/layout"],"tags":["component"],"content":"Quartz can generate a list of recent notes based on some filtering and sorting criteria. Though this component isn’t included in any layout by default, you can add it by using Component.RecentNotes in quartz.layout.ts.\nCustomization\n\nChanging the title from “Recent notes”: pass in an additional parameter to Component.RecentNotes({ title: &quot;Recent writing&quot; })\nChanging the number of recent notes: pass in an additional parameter to Component.RecentNotes({ limit: 5 })\nDisplay the note’s tags (defaults to true): Component.RecentNotes({ showTags: false })\nShow a ‘see more’ link: pass in an additional parameter to Component.RecentNotes({ linkToMore: &quot;tags/components&quot; }). This field should be a full slug to a page that exists.\nCustomize filtering: pass in an additional parameter to Component.RecentNotes({ filter: someFilterFunction }). The filter function should be a function that has the signature (f: QuartzPluginData) =&gt; boolean.\nCustomize sorting: pass in an additional parameter to Component.RecentNotes({ sort: someSortFunction }). By default, Quartz will sort by date and then tie break lexographically. The sort function should be a function that has the signature (f1: QuartzPluginData, f2: QuartzPluginData) =&gt; number. See byDateAndAlphabetical in quartz/components/PageList.tsx for an example.\nComponent: quartz/components/RecentNotes.tsx\nStyle: quartz/components/styles/recentNotes.scss\n"},"Area/EE/求职招聘":{"slug":"Area/EE/求职招聘","filePath":"Area/EE/求职招聘.md","title":"求职招聘","links":["Project/AUTOSAR/方法论","quartz-layout.png"],"tags":[],"content":"Like Wikipedia, when you hover over a link in Quartz, there is a popup of a page preview that you can scroll to see the entire content. Links to headers will also scroll the popup to show that specific header in view.\nBy default, Quartz only fetches previews for pages inside your vault due to CORS. It does this by selecting all HTML elements with the popover-hint class. For most pages, this includes the page title, page metadata like words and time to read, tags, and the actual page content.\nWhen creating your own components, you can include this popover-hint class to also include it in the popover.\nSimilar to Obsidian, images referenced using wikilinks can also be viewed as popups.\nConfiguration\n\nRemove popovers: set the enablePopovers field in quartz.config.ts to be false.\nStyle: quartz/components/styles/popover.scss\nScript: quartz/components/scripts/popover.inline.ts\n"},"Area/EE/测试":{"slug":"Area/EE/测试","filePath":"Area/EE/测试.md","title":"测试","links":[],"tags":["Area","Test"],"content":"一、软件测试的分类\n1、按开发阶段：单元测试、集成测试、系统测试、验收测试\n2、按测试实施组织：α、β、第三方\n3、按测试执行方式：静态测试、动态测试\n4、按是否查看代码：黑盒测试、白盒测试、灰盒测试\n5、按是否手工执行划分：手工测试、自动化测试\n6、按测试对象划分：性能测试、安全测试、兼容性测试、文档测试、易用性测试（用户体验测试）、业务测试、界面测试、安装测试\n7、按测试地域划分：本地化测试、国际化测试\n二、按开发阶段划分\n1、UI界面层（用户界面测试）：功能性验证测试、兼容性与用户测试\n2、业务逻辑层（API层面）：客户端模拟测试、内外接口测试、SDK接口测试（Software Development Kit一般指的是软件工程师特定的软件包建立的开发工具的集合）\n3、数据处理层：单元测试\n1）单元测试\n单元测试是对软件组成进行的测试。其目的是检验软件基本组成单位的正确性。测试对象是软件设计的最小单元：模块，又称为模块测试。\n测试阶段：编码后或者编码前（TDD）\n测试对象：最小模块\n测试人员：白盒测试工程师或开发人员\n测试依据：代码和注释+设计详细文档\n测试方法：白盒测试\n测试内容：模块接口测试、局部数据结构测试、路径测试、错误处理测试、边界测试\n单元测试是白盒测试，但是白盒测试不是单元测试\n2）集成测试\n集成测试（也成联合测试，联调）、组装测试，将程序模块采用适当的集成策略组装起来，\n测试阶段：一般的单元测试之后进行\n测试对象：模块间的接口\n测试人员：白盒测试工程师或开发工程师\n测试依据：单元测试模块+概要设计文档\n测试方法：黑盒测试和白盒测试相互结合\n测试内容：模块之间数据传输、模块之间功能冲突、模块组装功能的正确性、全局数据结构、单模块缺陷对系统的影响。\n3）系统测试\n将软件系统看成一个系统测试。包括对功能、性能以及软件所运行的硬软件环境进行测试。时间大部分在系统测试执行阶段，，包括了回归测试和冒烟测试\n测试阶段：集成测试之后\n测试对象：整个系统（软、硬件）\n测试人员：黑盒测试工程师\n测试依据：需求规格说明文档\n测试方法：黑盒测试\n测试内容：功能、界面、可靠性、易用性、性能、兼容性、安全等\n回归测试（Regression Tesing）\n回归测试指的就是你修改了旧的代码之后。重新进行测试以确认修改没有引入新的错误或导致其他代码产生错误，自动回归测试将大幅降低系统测试、维护升级等阶段的成本。\n在整个软件的过程中占有很大的工作量比重，软件开发的各个阶段都会运行多次回归测试。\n冒烟测试（Regression Tesing）\n对一个硬件或硬件组件进行更改或修复后，直接给设备加电，如果没有冒烟就认为该组件通过了测试，\n冒烟测试的对象都是每一个新编译的需要正式测试的软件版本，目的是确认软件的基本功能正常，可以进行后续的测试工作，冒烟测试的执行者是版本编译人员。\n冒烟测试一般是开发人员开发完毕之后送给测试人员进行测试时，测试人员要先进行冒烟，用以保证基本功能是正确的，不会阻碍后续的测试。\n4）验收测试\n验收测试是部署软件之前的最后一个测试操作，它是技术测试室的最后一个阶段，也叫做交付测试，验收测试的目的是保证软件的准备就绪，按照项目合同、任务书、双方约定的验收依据文档，向软件的购买者展示该软件的原始的需求。\n测试阶段：系统测试之后\n测试对象：整个的系统（包括软硬件）\n测试人员：最终的用户或者需求方\n测试依据：用户需求和验收标准\n测试方法：黑盒测试\n测试内容：同系统测试一样（功能。。。。文档等）\n三、测试实施组织\n1）α测试\n主要是由一个用户在开发环境进行的测试，也可以是公司内部的用户在模拟实际操作环境下进行的测试。\n主要的目的是：评价软件产品的FLURPS（即功能、局域化、可使用性、可靠性、性能和支持）；\n预发布环：和生产环境是一样的，由本项目以外的研发和测试人员进行的测试、公司内部的客户不参与，项目以外的人员都可以进行与\n2）β测试\nβ测试：由软件的最终的用户们在一个或者多个客户场所进行的测试。\nα测试和β测试的区别：\n测试的场所是不同的：α测试是把用户请到开发方的场所进行的测试，β测试值的是就是在一个用户或者多个用户场所所进行的测试。\nα测试的测试环境是由开发方进行控制的，用户的数量是相对比较少的，时间也是相对比较集中的。β测试的测试场所也不是由开发方进行控制的，相对来说用户的数量是相对比较多的，但是时间也不是很集中的。\nα测试是先与β测试的，通用的软件产品时需要大规模的β测试，猜测是的周期是相对是比较长的。\n第三方测试;\n介于开发方和用户之间的组织测试。\n四、按是否运行进行划分\n静态测试:\n静态测试值的是不运行程序本身，仅通过分析和检查源程序的语法、结构、过程、接口来检查程序的正确性。对需求规格说明书、软件设计说明书、流程图分析、符号执行来进行找错。\n检查项：代码的风格和规则审核；程序设计和结构审核；业务逻辑的审核、走查、审查与技术复审手册\n静态质量：软件的质量主要有以下六个方面来衡量：功能性、可靠性、可移植性、可用性、有效性、可维护性。\n代码静态分析和文档测试都是属于静态测试\n动态测试\n动态测试指的就是运行被测的程序。检查运行结果与预期结果的差异，并分析运行效率、正确性和健壮性的等性能，这种方法主要是由三部分进行组成的：测试用例、执行程序、分析程序运行输出的结果。\n大多数的软件测试就是属于动态测试的。\n五、按是否进行手工\n手工测试：是由人一个一个的输入测试用例，然后观察结果、和机器测试相对应，属于比较原始，大事需要一个一个步骤进行测试。\n优点：自动化无法替代探索性测试、发散思维类无既定结果的测试。\n缺点：执行的效率比较慢。量大易错。\n自动化测试\n在预设条件下运行系统或应用程序，评估运行结果、预先条件应该包括正常的条件和异常条件。简单的说自动化测试是把人为驱动的测试行为转化为机器执行的一种过程。\n自动化测试比如功能测试自动化、性能测试自动化、安全测试自动化\n通常我们所说的自动化测试就是指的是功能自动化测试\n自动化测试按照测试的对象来分：分为接口测试、UI测试等。接口测试的ROI（产出投入比）要比UI测试高。\n自动化实施的步骤\n1、完成功能测试，版本基本稳定\n2、根据项目特性、选择合适的项目自动化工具，并搭建环境\n3、提取手工测试的测试用例转化为自动化测试的用例\n4、通过工具，代码实现自动化的构造输入，自动检测输出结果是否符合预期\n5、生成自动化的构造输入，自动的检测世界古是否符合预期\n6、生成自动测试报告\n7、持续改进、脚本优化\n六、按是否查看代码\n1）黑盒测试（Black-box-Testing）\n黑盒测试也称为功能测试，测试中把被测的软件当成一个黑盒子，不关心盒子的内部结构是什么，指关心软件的输入数据和输出数据。\n2）白盒测试（White-box-Testing）\n白盒测试又称结构测试，透明盒测试、逻辑驱动测试或基于代码的测试。白盒值的是打开的盒子，去研究里面的源代码和程序结果。\n接口测试也是一种白盒测试。\n3）灰盒测试（White-box-Testing）\n灰盒测试：是介于白盒测试与黑盒测试之间的一种测试，主要用于集成测试阶段。不仅观念朱输入输出的正确性。同时也关注程序内部的情况。\n七、按照地域进行划分\n1）国际化测试（White-box-Testing）\n软件的国际化和软件的本地化是开发面向全球不同地区用户使用的软件系统的两个过程。而本地化测试和国际化测试则是这类软件产品进行测试。由于软件的全球普及。还有软外包行业的兴起，软件的本地化和软件的国际化俨然称为了一种软件测试的专门领域。\n本地化和国际化的软件测试的一些测试要点。\n1、本地化后的软件在外观上与原来版本存在着一些差异，外观是否整齐、不定样。\n2、是否对界面元素进行了本地化处理，包括对话框、菜单、工具栏、状态栏、提示信息（包括声音的提示、日志等）。\n3、在不同分辨率界面下是否显示的是正常的。\n4、是否存在不同的字体的大小，字体设置的是否恰当。\n5、日期、数字格式、货币等是否能够适应不同的国家的文化习俗。例如年、月、日，而英文是月日年。\n6、排序的方式是否考虑到了不同语言的特点。\n7、在不同个的国家采用的是不同的度量单位，软件是否能够自适应和转换。\n8、软件是否能够在不同类型的硬件上正常运行。正文翻译是否正确，恰当是否有语法的错误。\n9、软件是否能够适应不同的操作系统的平台。\n10、联机帮助和文档是否已经进行翻译，翻译后链接是否正常。正文翻译是否正确，恰当是否有语法的错误。\n本地化测试\n之前所有我们将的都是基于本地化进行测试的。\n测试对象划分\n1）业务测试\n是测试人员将系统的各个模块串接起来运行、模拟真是用户实际的工作流程，满足永续需求定义的功能进行测试的过程。\n2）界面测试\n界面测试也成为UI测试。测试用户界面的功能模块的布局是否合理，整体风格是否一致、各个控件的放置位置是否符合客户的使用习惯，还要测试操作界面操作便捷性、导航简单易懂性、页面元素的可用性，页面元素的可用性、界面中文字是否正确，命名是否统一，页面是否美观、文字、图片组合是否完美。\n3）容错性测试\n容错性测试：检查软件在异常条件下自身是否具有防护性的措施或密谋中灾难性恢复的手段\n划分为容错性测试和非容错性的测试。\n4）文档测试\n文档测试的关注点\n文档的术语\n文档的正确性\n文档的完整性\n文档的一致性\n文档的易用性\n5）兼容性测试\n兼容线性主要指的就是软件之间很好的运作，会不会有影响、软件和硬件之间是否能够发挥很好的效率工作，会不会影响导致系统的奔溃\n6）平台测试\n7）浏览器测试\n8）易用性测试\n易用性指的即使我们对于平时所使用的东西是否放在了合适的位置在我们是用的时候能够进行很好的找到。满足人体天生的人体工程学的范畴。\n9）安装测试\n测试程序的安装、卸载\n典型的就是测试APP的测试的安装和卸载\n10）安全测试\n安全测试是一个相当于来说独立的领域，需更多的专业知识，例如Web的安全测试、需要熟悉各种网络协议，Tcp/Http,防火墙、CDN、熟悉各种操作系统的漏洞。 熟悉路由器等。从软件来说熟悉各种的攻击手段，例如sql注入、Xss等。\n11）性能测试\n检查系统是否满足需求规格说明书中规定的性能\n通常表现在以下的几个方面\n对资源的利用（如内存、处理机周期等）进行精确地度量。\n对执行间隔、日志文件（如中断、报错）\n响应时间\n吞吐量（TPS）\n辅助存储区（例如缓冲区、工作区的大小）-处理精度等进行检测\n12）内存泄漏测试\n造成内存泄漏的原因\n内存分配完了忘记进行了回收\n程序写法有问题\n某些API函数的使用不正确，造成内存泄漏\n没有及时的进行释放"},"Area/EE/电子基础":{"slug":"Area/EE/电子基础","filePath":"Area/EE/电子基础.md","title":"电子基础","links":["Area/EE/EE"],"tags":["Area","Electron"],"content":"\n\n                  \n                  NOTE\n                  \n                \n\n\n链接地址：电子基础\n\n\n\n\n学习EE\n\nkanban\n  [第一章]\n    [1.1 概述]\n    [1.2 半导体基础知识]\n    [1.3 PN结及其特性]\n    [1.4 二极管的分类与特性]\n    [1.5 二极管基本电路及其分析法]\n    [1.6 二极管的使用常识]\n    [1.7 万用表测量二极管]\n    [1.8 特殊二极管]\n    [1.9 概并联型硅稳压管稳压电路]\n  [第二章]\n    [Design grammar]\n  [第三章]\n    [Create parsing tests]\n  [第四章]\n    [define getData]\n  [第五章]\n    [ARM]\n    [RISC-V]\n  [第六章]\n    [ARM]\n    [RISC-V]\n  [第七章]\n  [第八章]\n  [第九章]\n"},"Area/EE/看门狗":{"slug":"Area/EE/看门狗","filePath":"Area/EE/看门狗.md","title":"看门狗","links":[],"tags":["Area","单片机"],"content":""},"Area/EE/程序员修养":{"slug":"Area/EE/程序员修养","filePath":"Area/EE/程序员修养.md","title":"程序员修养","links":[],"tags":["Area","Progarm"],"content":""},"Area/EE/英语":{"slug":"Area/EE/英语","filePath":"Area/EE/英语.md","title":"英语","links":["Project/AUTOSAR/应用领域","Resource/GitHub/RemoveDrafts","Resource/RSS/ExplicitPublish","Archive/Read/configuration"],"tags":["Area","English"],"content":"There may be some notes you want to avoid publishing as a website. Quartz supports this through two mechanisms which can be used in conjunction:\nFilter Plugins\nFilter plugins are plugins that filter out content based off of certain criteria. By default, Quartz uses the RemoveDrafts plugin which filters out any note that has draft: true in the frontmatter.\nIf you’d like to only publish a select number of notes, you can instead use ExplicitPublish which will filter out all notes except for any that have publish: true in the frontmatter.\n\n\n                  \n                  Warning\n                  \n                \n\n\nRegardless of the filter plugin used, all non-markdown files will be emitted and available publically in the final build. This includes files such as images, voice recordings, PDFs, etc.\n\n\n\nignorePatterns\nThis is a field in quartz.config.ts under the main configuration which allows you to specify a list of patterns to effectively exclude from parsing all together. Any valid fast-glob pattern works here.\n\n\n                  \n                  Note\n                  \n                \n\n\nBash’s glob syntax is slightly different from fast-glob’s and using bash’s syntax may lead to unexpected results.\n\n\n\nCommon examples include:\n\nsome/folder: exclude the entire of some/folder\n*.md: exclude all files with a .md extension\n!(*.md) exclude all files that don’t have a .md extension. Note that negations must parenthesize the rest of the pattern!\n**/private: exclude any files or folders named private at any level of nesting\n\n\n\n                  \n                  Warning\n                  \n                \n\n\nMarking something as private via either a plugin or through the ignorePatterns pattern will only prevent a page from being included in the final built site. If your GitHub repository is public, also be sure to include an ignore for those in the .gitignore of your Quartz. See the git documentation for more information.\n\n\n"},"Area/EE/行业报告":{"slug":"Area/EE/行业报告","filePath":"Area/EE/行业报告.md","title":"行业报告","links":["Archive/Read/configuration"],"tags":["Area"],"content":"Quartz features a graph-view that can show both a local graph view and a global graph view.\n\nThe local graph view shows files that either link to the current file or are linked from the current file. In other words, it shows all notes that are at most one hop away.\nThe global graph view can be toggled by clicking the graph icon on the top-right of the local graph view. It shows all the notes in your graph and how they connect to each other.\n\nBy default, the node radius is proportional to the total number of incoming and outgoing internal links from that file.\nAdditionally, similar to how browsers highlight visited links a different colour, the graph view will also show nodes that you have visited in a different colour.\n\n\n                  \n                  Info\n                  \n                \n\n\nGraph View requires the ContentIndex emitter plugin to be present in the configuration.\n\n\n\nCustomization\nMost configuration can be done by passing in options to Component.Graph().\nFor example, here’s what the default configuration looks like:\nquartz.layout.tsComponent.Graph({\n  localGraph: {\n    drag: true, // whether to allow panning the view around\n    zoom: true, // whether to allow zooming in and out\n    depth: 1, // how many hops of notes to display\n    scale: 1.1, // default view scale\n    repelForce: 0.5, // how much nodes should repel each other\n    centerForce: 0.3, // how much force to use when trying to center the nodes\n    linkDistance: 30, // how long should the links be by default?\n    fontSize: 0.6, // what size should the node labels be?\n    opacityScale: 1, // how quickly do we fade out the labels when zooming out?\n    removeTags: [], // what tags to remove from the graph\n    showTags: true, // whether to show tags in the graph\n    enableRadial: false, // whether to constrain the graph, similar to Obsidian\n  },\n  globalGraph: {\n    drag: true,\n    zoom: true,\n    depth: -1,\n    scale: 0.9,\n    repelForce: 0.5,\n    centerForce: 0.3,\n    linkDistance: 30,\n    fontSize: 0.6,\n    opacityScale: 1,\n    removeTags: [], // what tags to remove from the graph\n    showTags: true, // whether to show tags in the graph\n    enableRadial: true, // whether to constrain the graph, similar to Obsidian\n  },\n})\nWhen passing in your own options, you can omit any or all of these fields if you’d like to keep the default value for that field.\nWant to customize it even more?\n\nRemoving graph view: delete all usages of Component.Graph() from quartz.layout.ts.\nComponent: quartz/components/Graph.tsx\nStyle: quartz/components/styles/graph.scss\nScript: quartz/components/scripts/graph.inline.ts\n"},"Area/EE/计算机组成原理":{"slug":"Area/EE/计算机组成原理","filePath":"Area/EE/计算机组成原理.md","title":"计算机组成原理","links":["Resource/GitHub/ObsidianFlavoredMarkdown","Resource/GitHub/SyntaxHighlighting"],"tags":["Area","Computer"],"content":"Quartz supports the same Admonition-callout syntax as Obsidian.\nThis includes\n\n12 Distinct callout types (each with several aliases)\nCollapsable callouts\n\n&gt; [!info] Title\n&gt; \n&gt; This is a callout!\n\nSee documentation on supported types and syntax here.\n\n\n                  \n                  Warning\n                  \n                \n\n\nWondering why callouts may not be showing up even if you have them enabled? You may need to reorder your plugins so that ObsidianFlavoredMarkdown is after SyntaxHighlighting.\n\n\n\nCustomization\nThe callouts are a functionality of the ObsidianFlavoredMarkdown plugin. See the plugin page for how to enable or disable them.\nYou can edit the icons by customizing quartz/styles/callouts.scss.\nAdd custom callouts\nBy default, custom callouts are handled by applying the note style. To make fancy ones, you have to add these lines to custom.scss.\nquartz/styles/custom.scss.callout {\n  &amp;[data-callout=&quot;custom&quot;] {\n    --color: #customcolor;\n    --border: #custombordercolor;\n    --bg: #custombg;\n    --callout-icon: url(&quot;data:image/svg+xml; utf8, &lt;custom formatted svg&gt;&quot;); //SVG icon code\n  }\n}\n\n\n                  \n                  Warning\n                  \n                \n\n\nDon’t forget to ensure that the SVG is URL encoded before putting it in the CSS. You can use tools like this one to help you do that.\n\n\n\nShowcase\n\n\n                  \n                  Info\n                  \n                \n\n\nDefault title\n\n\n\n\n\n                  \n                  Can callouts be nested?\n                  \n                \n\n\n\n\n                  \n                  Yes!, they can. And collapsed! \n                  \n                \n\n\n\n\n                  \n                  You can even use multiple layers of nesting. \n                  \n                \n\n\n\n\n\n\n\n\n\n                  \n                  Note\n                  \n                \n\n\nAliases: “note”\n\n\n\n\n\n                  \n                  Abstract\n                  \n                \n\n\nAliases: “abstract”, “summary”, “tldr”\n\n\n\n\n\n                  \n                  Info\n                  \n                \n\n\nAliases: “info”\n\n\n\n\n\n                  \n                  Todo\n                  \n                \n\n\nAliases: “todo”\n\n\n\n\n\n                  \n                  Tip\n                  \n                \n\n\nAliases: “tip”, “hint”, “important”\n\n\n\n\n\n                  \n                  Success\n                  \n                \n\n\nAliases: “success”, “check”, “done”\n\n\n\n\n\n                  \n                  Question\n                  \n                \n\n\nAliases: “question”, “help”, “faq”\n\n\n\n\n\n                  \n                  Warning\n                  \n                \n\n\nAliases: “warning”, “attention”, “caution”\n\n\n\n\n\n                  \n                  Failure\n                  \n                \n\n\nAliases: “failure”, “missing”, “fail”\n\n\n\n\n\n                  \n                  Danger\n                  \n                \n\n\nAliases: “danger”, “error”\n\n\n\n\n\n                  \n                  Bug\n                  \n                \n\n\nAliases: “bug”\n\n\n\n\n\n                  \n                  Example\n                  \n                \n\n\nAliases: “example”\n\n\n\n\n\n                  \n                  Quote\n                  \n                \n\n\nAliases: “quote”, “cite”\n\n\n"},"Area/EE/计算机网络":{"slug":"Area/EE/计算机网络","filePath":"Area/EE/计算机网络.md","title":"计算机网络","links":["Archive/Read/setting-up-your-GitHub-repository"],"tags":["component"],"content":"Quartz also has the ability to hook into various providers to enable readers to leave comments on your site.\n\nAs of today, only Giscus is supported out of the box but PRs to support other providers are welcome!\nProviders\nGiscus\nFirst, make sure that the GitHub repository you are using for your Quartz meets the following requirements:\n\nThe repository is public, otherwise visitors will not be able to view the discussion.\nThe giscus app is installed, otherwise visitors will not be able to comment and react.\nThe Discussions feature is turned on by enabling it for your repository.\n\nThen, use the Giscus site to figure out what your repoId and categoryId should be. Make sure you select Announcements for the Discussion category.\n\n\nAfter entering both your repository and selecting the discussion category, Giscus will compute some IDs that you’ll need to provide back to Quartz. You won’t need to manually add the script yourself as Quartz will handle that part for you but will need these values in the next step!\n\nFinally, in quartz.layout.ts, edit the afterBody field of sharedPageComponents to include the following options but with the values you got from above:\nquartz.layout.tsafterBody: [\n  Component.Comments({\n    provider: &#039;giscus&#039;,\n    options: {\n      // from data-repo\n      repo: &#039;jackyzha0/quartz&#039;,\n      // from data-repo-id\n      repoId: &#039;MDEwOlJlcG9zaXRvcnkzODcyMTMyMDg&#039;,\n      // from data-category\n      category: &#039;Announcements&#039;,\n      // from data-category-id\n      categoryId: &#039;DIC_kwDOFxRnmM4B-Xg6&#039;,\n      // from data-lang\n      lang: &#039;en&#039;\n    }\n  }),\n],\nCustomization\nQuartz also exposes a few of the other Giscus options as well and you can provide them the same way repo, repoId, category, and categoryId are provided.\ntype Options = {\n  provider: &quot;giscus&quot;\n  options: {\n    repo: `${string}/${string}`\n    repoId: string\n    category: string\n    categoryId: string\n \n    // Url to folder with custom themes\n    // defaults to &#039;https://${cfg.baseUrl}/static/giscus&#039;\n    themeUrl?: string\n \n    // filename for light theme .css file\n    // defaults to &#039;light&#039;\n    lightTheme?: string\n \n    // filename for dark theme .css file\n    // defaults to &#039;dark&#039;\n    darkTheme?: string\n \n    // how to map pages -&gt; discussions\n    // defaults to &#039;url&#039;\n    mapping?: &quot;url&quot; | &quot;title&quot; | &quot;og:title&quot; | &quot;specific&quot; | &quot;number&quot; | &quot;pathname&quot;\n \n    // use strict title matching\n    // defaults to true\n    strict?: boolean\n \n    // whether to enable reactions for the main post\n    // defaults to true\n    reactionsEnabled?: boolean\n \n    // where to put the comment input box relative to the comments\n    // defaults to &#039;bottom&#039;\n    inputPosition?: &quot;top&quot; | &quot;bottom&quot;\n \n    // set your preference language here\n    // defaults to &#039;en&#039;\n    lang?: string\n  }\n}\nCustom CSS theme\nQuartz supports custom theme for Giscus. To use a custom CSS theme, place the .css file inside the quartz/static folder and set the configuration values.\nFor example, if you have a light theme light-theme.css, a dark theme dark-theme.css, and your Quartz site is hosted at example.com/:\nafterBody: [\n  Component.Comments({\n    provider: &#039;giscus&#039;,\n    options: {\n      // Other options\n \n      themeUrl: &quot;example.com/static/giscus&quot;, // corresponds to quartz/static/giscus/\n      lightTheme: &quot;light-theme&quot;, // corresponds to light-theme.css in quartz/static/giscus/\n      darkTheme: &quot;dark-theme&quot;, // corresponds to dark-theme.css quartz/static/giscus/\n    }\n  }),\n],\nConditionally display comments\nQuartz can conditionally display the comment box based on a field comments in the frontmatter. By default, all pages will display comments, to disable it for a specific page, set comments to false.\n---\ntitle: Comments disabled here!\ncomments: false\n---\n"},"Area/EE/设计模式":{"slug":"Area/EE/设计模式","filePath":"Area/EE/设计模式.md","title":"设计模式","links":["Archive/Read/layout","Archive/Read/authoring-content","table-of-contents","Area/EE/数学"],"tags":["Area","Design"],"content":"Quartz features an explorer that allows you to navigate all files and folders on your site. It supports nested folders and is highly customizable.\nBy default, it shows all folders and files on your page. To display the explorer in a different spot, you can edit the layout.\nDisplay names for folders get determined by the title frontmatter field in folder/index.md (more detail in Authoring Content). If this file does not exist or does not contain frontmatter, the local folder name will be used instead.\n\n\n                  \n                  Info\n                  \n                \n\n\nThe explorer uses local storage by default to save the state of your explorer. This is done to ensure a smooth experience when navigating to different pages.\nTo clear/delete the explorer state from local storage, delete the fileTree entry (guide on how to delete a key from local storage in chromium based browsers can be found here). You can disable this by passing useSavedState: false as an argument.\n\n\n\nCustomization\nMost configuration can be done by passing in options to Component.Explorer().\nFor example, here’s what the default configuration looks like:\nquartz.layout.tsComponent.Explorer({\n  title: &quot;Explorer&quot;, // title of the explorer component\n  folderClickBehavior: &quot;collapse&quot;, // what happens when you click a folder (&quot;link&quot; to navigate to folder page on click or &quot;collapse&quot; to collapse folder on click)\n  folderDefaultState: &quot;collapsed&quot;, // default state of folders (&quot;collapsed&quot; or &quot;open&quot;)\n  useSavedState: true, // whether to use local storage to save &quot;state&quot; (which folders are opened) of explorer\n  // omitted but shown later\n  sortFn: ...,\n  filterFn: ...,\n  mapFn: ...,\n  // what order to apply functions in\n  order: [&quot;filter&quot;, &quot;map&quot;, &quot;sort&quot;],\n})\nWhen passing in your own options, you can omit any or all of these fields if you’d like to keep the default value for that field.\nWant to customize it even more?\n\nRemoving explorer: remove Component.Explorer() from quartz.layout.ts\n\n(optional): After removing the explorer component, you can move the Table of Contents component back to the left part of the layout\n\n\nChanging sort, filter and map behavior: explained in Advanced customization\nComponent: quartz/components/Explorer.tsx\nStyle: quartz/components/styles/explorer.scss\nScript: quartz/components/scripts/explorer.inline.ts\n\nAdvanced customization\nThis component allows you to fully customize all of its behavior. You can pass a custom sort, filter and map function.\nAll functions you can pass work with the FileTrieNode class, which has the following properties:\nquartz/components/Explorer.tsxclass FileTrieNode {\n  isFolder: boolean\n  children: Array&lt;FileTrieNode&gt;\n  data: ContentDetails | null\n}\nquartz/plugins/emitters/contentIndex.tsxexport type ContentDetails = {\n  slug: FullSlug\n  title: string\n  links: SimpleSlug[]\n  tags: string[]\n  content: string\n}\nEvery function you can pass is optional. By default, only a sort function will be used:\nDefault sort function// Sort order: folders first, then files. Sort folders and files alphabetically\nComponent.Explorer({\n  sortFn: (a, b) =&gt; {\n    if ((!a.isFolder &amp;&amp; !b.isFolder) || (a.isFolder &amp;&amp; b.isFolder)) {\n      return a.displayName.localeCompare(b.displayName, undefined, {\n        numeric: true,\n        sensitivity: &quot;base&quot;,\n      })\n    }\n \n    if (!a.isFolder &amp;&amp; b.isFolder) {\n      return 1\n    } else {\n      return -1\n    }\n  },\n})\n\nYou can pass your own functions for sortFn, filterFn and mapFn. All functions will be executed in the order provided by the order option (see Customization). These functions behave similarly to their Array.prototype counterpart, except they modify the entire FileNode tree in place instead of returning a new one.\nFor more information on how to use sort, filter and map, you can check Array.prototype.sort(), Array.prototype.filter() and Array.prototype.map().\nType definitions look like this:\ntype SortFn = (a: FileTrieNode, b: FileTrieNode) =&gt; number\ntype FilterFn = (node: FileTrieNode) =&gt; boolean\ntype MapFn = (node: FileTrieNode) =&gt; void\nBasic examples\nThese examples show the basic usage of sort, map and filter.\nUse sort to put files first\nUsing this example, the explorer will alphabetically sort everything.\nquartz.layout.tsComponent.Explorer({\n  sortFn: (a, b) =&gt; {\n    return a.displayName.localeCompare(b.displayName)\n  },\n})\nChange display names (map)\nUsing this example, the display names of all FileNodes (folders + files) will be converted to full upper case.\nquartz.layout.tsComponent.Explorer({\n  mapFn: (node) =&gt; {\n    node.displayName = node.displayName.toUpperCase()\n    return node\n  },\n})\nRemove list of elements (filter)\nUsing this example, you can remove elements from your explorer by providing an array of folders/files to exclude.\nNote that this example filters on the title but you can also do it via slug or any other field available on FileTrieNode.\nquartz.layout.tsComponent.Explorer({\n  filterFn: (node) =&gt; {\n    // set containing names of everything you want to filter out\n    const omit = new Set([&quot;authoring content&quot;, &quot;tags&quot;, &quot;advanced&quot;])\n \n    // can also use node.slug or by anything on node.data\n    // note that node.data is only present for files that exist on disk\n    // (e.g. implicit folder nodes that have no associated index.md)\n    return !omit.has(node.displayName.toLowerCase())\n  },\n})\nRemove files by tag\nYou can access the tags of a file by node.data.tags.\nquartz.layout.tsComponent.Explorer({\n  filterFn: (node) =&gt; {\n    // exclude files with the tag &quot;explorerexclude&quot;\n    return node.data.tags(&quot;explorerexclude&quot;) !== true\n  },\n})\nShow every element in explorer\nBy default, the explorer will filter out the tags folder.\nTo override the default filter function, you can set the filter function to undefined.\nquartz.layout.tsComponent.Explorer({\n  filterFn: undefined, // apply no filter function, every file and folder will visible\n})\nAdvanced examples\n\n\n                  \n                  Tip\n                  \n                \n\n\nWhen writing more complicated functions, the layout file can start to look very cramped.\nYou can fix this by defining your sort functions outside of the component\nand passing it in.\nquartz.layout.tsimport { Options } from &quot;./quartz/components/Explorer&quot;\n \nexport const mapFn: Options[&quot;mapFn&quot;] = (node) =&gt; {\n  // implement your function here\n}\nexport const filterFn: Options[&quot;filterFn&quot;] = (node) =&gt; {\n  // implement your function here\n}\nexport const sortFn: Options[&quot;sortFn&quot;] = (a, b) =&gt; {\n  // implement your function here\n}\n \nComponent.Explorer({\n  // ... your other options\n  mapFn,\n  filterFn,\n  sortFn,\n})\n\n\n\nAdd emoji prefix\nTo add emoji prefixes (📁 for folders, 📄 for files), you could use a map function like this:\nquartz.layout.tsComponent.Explorer({\n  mapFn: (node) =&gt; {\n    if (node.isFolder) {\n      node.displayName = &quot;📁 &quot; + node.displayName\n    } else {\n      node.displayName = &quot;📄 &quot; + node.displayName\n    }\n  },\n})"},"Area/KM/index":{"slug":"Area/KM/index","filePath":"Area/KM/index.md","title":"KM","links":[],"tags":[],"content":""},"Area/KM/数字花园":{"slug":"Area/KM/数字花园","filePath":"Area/KM/数字花园.md","title":"数字花园","links":[],"tags":[],"content":"数字花园\n\n\n                  \n                  Note\n                  \n                \n\n\n数字花园原文是“Digital Garden”。 这是最近在国外兴起的一个概念，比较小众，不过还蛮有意思的。与其说是方法，不如说是一种理念。\n简单来说，数字花园是通过借助网络数字工具，对想法、笔记和思考等一切你感兴趣的信息或进行收集、整理和创作，文字之间用标签或链接创建连接，形成一座独具个人浓厚色彩的信息与知识型花园。\n这个花园可以是开放的，也可以作为仅你可见的私人庭院。但不管选择什么方式，在搭建花园的过程中，不可避免地至少要经历这几个步骤，\n即：\n播种：\n选取高质量的“种子”为你的花园播种。这些可以是网络上看到的有价值的信息，也可以是自己的思考、想法和念头。\n照料：\n种子播下后不能就任其枯萎，需要你用不断补充的思考和想法去浇灌它们，帮助它们逐渐成长为花朵和大树。这一步尤为关键，因为花园的植物依赖你去为它们建立关联性和整体性。毕竟如果整座花园只能有一个人能够读懂的话，这个人就是你自己。\n结果：在你的精心照料下，种子最后将开花结果，你可以将其摘下（创造出新的想法和作品），并分享给他人。\n\n\n\n\n\n数字花园\n一、隐喻：花园与溪流\n2015年秋天，斯坦福大学举办了一场关于在线教育研究的讲座，来自华盛顿州立大学的麦克·考菲尔德做了一个50分钟的主题演讲，演讲的标题是《花园与溪流：数字田园牧歌》。\n这场演讲真正确定了数字花园的理念，有人评价说，如果我们要找“数字花园”的原始出处，那么它应该是这场演讲。演讲具体讲了什么呢？\n麦克·考菲尔德认为，互联网有两种形态，一种是“花园”，一种是“溪流”。\n花园（Garden）是说，互联网就像一块土地，上面有小路，有花草树木，它们皆有所指。小路就是超链接，让我们在不同网页穿梭，花花草草则是不同的网站，这正是早期的互联网形态。\n溪流（Stream）指的就是线性的信息流，各种关注、算法推荐、评论等产生的信息流，就像一条条小溪不停流淌。溪流里的信息，上一条和下一条可能并不相关，只是被聚合到了一起。甚至社交网络号称是网络，但呈现在大家面前的还是一条条的信息流。\n如果互联网只剩下溪流模式，那么它迟早会变成充斥知识碎片的混沌之地。如果每一个人都只投身于溪流当中，也无法收获真正的成长。\n考菲尔德认为，我们应该像园丁维护花园一样去学习和探索知识。\n事实上，考菲尔德并非是第一个对溪流模式的互联网提出批评的人，2010年，美国畅销书作者尼古拉斯·卡尔写了一本书，叫做《浅薄》（The Shallows），它的副标题是：互联网如何毒化了我们的大脑。\n而溪流模式的互联网，充斥着这样的内容。\n这也造成了一个悖论：互联网吸引我们的注意力，只是为了分散我们的注意力。\n人的大脑本身具有极强的可塑性，脑科学研究发现，信息要在记忆区停留大约三小时才能被转化成长期记忆，智能时代，信息进入长期记忆愈发困难。\n大脑慢慢的从一个可以处理复杂问题的操作系统，变成了一个透明的躯壳，海量的信息和知识不过是感官世界的匆匆过客。\n时至今日，溪流模式已经成为互联网的主流。但它其实并不适合获取知识，考菲尔德举了一个例子。\n比如，他选了一个题目“地方政府补贴影响”，搜索结果倒是不少，但前几十条内容里要么只是提了一嘴，要么就是预设立场——认为政府干预市场罪大恶极，从而发泄自己的情绪，根本没有多少真正的讨论。\n考菲尔德得出结论：在溪流模式中，无法承载系统化的知识。\n考菲尔德的演讲发布后，数字花园的理念由此被真正确立。在他分享之后，网络上对于数字花园的讨论逐渐多了起来，也开始有人尝试实践，去打造自己的数字花园。\n二、那么该如何构建属于自己的数字花园？\n首先，可以以公众号或网站等为载体，基于个人喜好和擅长的内容领域建立属于你的数字花园，在这里放置你的感受、收获和一切有价值的文字，如果恰好对读者也有一定价值，那又不乏分享的乐趣。\n属于你的个性化数字花园既能为你提供宝贵的知识源泉，也需要你持续地经营。\n这也是一种用输出倒逼输入的方式。我们身处一个需要不断更新自身知识和迭代能力的行业环境，如果要保持良好活力，必须不断成长和汲取养分。\n互联网时代，信息的广度已经大到让人产生焦虑的地步了。只要你想要，你可以借助网络获取任何信息和知识。\n可是，谁又认真考虑过关于所获取信息的深度呢？如果只是单纯追逐信息收集的广度，终将在一堆积压如山的信息前，体会到一种信息爆炸的崩溃。\n因此，我们试图寻找一个“小径分叉的花园”。通过深度的输入，深入每条信息和知识的内在关联，再通过系统化的输出，最终构建一个结构化的数字花园。\n三、构建数字花园还需注意几点\n第一，内容表述上务必是通俗易懂的\n在众多学习方法中，我更推崇费曼学习法，养成这种学习习惯会让你能用简洁的语言去驾驭复杂的概念，并将所学到的知识，以他人易懂的高度概括化的方式传达。\n带着这样的信念，你的数字花园能够给大家奉献出更多深入浅出的内容，方便他人理解与分享。\n第二，每篇文章都有主题归类，并在知识之间建立关联\n细心的读者或许发现，芒格学院发表的文章都有特定的主题或标签归类，而每个主题栏目都是结构化的系统。目前所有的栏目都是我深思熟虑后开辟的，每一项栏目都传达着我渴望分享的内容主题。\n截止目前，已经有4个栏目诞生，分别是：思维模型、心智成长、跨学科和大师智库。后面还会为大家呈现出更多精彩的新栏目！最终呈现出一幅整体的“花园图谱”。\n在沉淀积累内容的过程中，还要注意信息与信息、信息与知识、知识与知识之间不是孤岛，发布的内容，可以借助标签和链接等方式进行关联，最好的方式是将新想法植入，并与老笔记连接、整合，有时候甚至还可以催生出另一个想法。\n第三，严格把控内容质量，杜绝有害杂草。\n虽然花园是基于作者的个人喜好和擅长的内容领域建立的，但既然是开放式分享的花园，作为花园主人，决不能弄一些只为博眼球或东拼西揍的低质内容来填充。悉心照料花园的主人们，肯定都希望每个到访花园的客人，在探寻它的过程中，或多或少能获取一些独特的感受和思考。\n最后，简单总结下「数字花园」\n整个培育过程像极了打理一座花园，它的含义是，建立一个笔记库（数字花园），把每一个想法、念头、信息，看作一颗种子，去悉心照料它们，嫁接它们，让它们长出新的枝条、结出果实，与别人分享。\n你会发现，它的理念其实跟我一直以来的方法还挺吻合的。也就是说：\n阅读高质量的内容，悉心筛选好的「种子」，不要将时间浪费在无价值的信息上。\n广泛播撒它们，不要错过每一个想法，让每一个想法都有一片可供成长的空间。\n悉心照顾种子，多为它们施肥、浇水，提供养料，不断丰富和完善每一个想法，让它更加充实。\n试着嫁接它们，在想法之间不断联想，把不同的念头和想法结合起来，看它们能否碰撞出新的火花。\n一旦开花结果，让它们成为花园里新的风景，来丰富你的大脑，不断更新你的思维模式。\n当你孕育出一些有趣的成果，不妨把它分享给别人，向别人传达你的启发，让集体智慧得以增长。\n也希望每个人，都能拥有一片属于自己的「数字花园」。\n愿我们于花园中相遇。"},"Area/index":{"slug":"Area/index","filePath":"Area/index.md","title":"Area","links":[],"tags":[],"content":""},"Project/AUTOSAR/AUTOSAR":{"slug":"Project/AUTOSAR/AUTOSAR","filePath":"Project/AUTOSAR/AUTOSAR.md","title":"AUTOSAR","links":["Project/AUTOSAR/核心理念","Project/AUTOSAR/方法论","Project/AUTOSAR/软件架构","Project/AUTOSAR/标准与规范","Project/AUTOSAR/应用领域"],"tags":[],"content":"AUTOSAR的知识体系\n\nflowchart TD\n    A[AUTOSAR 知识体系]\n\n    A --&gt; B[核心理念与方法论]\n    A --&gt; C[软件架构标准]\n    A --&gt; D[方法论与流程]\n    A --&gt; E[标准与规范文档]\n\n    B --&gt; B1[分层架构]\n    B --&gt; B2[虚拟功能总线&lt;br&gt;VFB]\n    B --&gt; B3[软件组件&lt;br&gt;SWC]\n    B --&gt; B4[接口与端口]\n\n    subgraph C [软件架构标准]\n        direction LR\n        C1[经典平台&lt;br&gt;CP]\n        C2[自适应平台&lt;br&gt;AP]\n    end\n\n    C1 --&gt; C1A[应用层]\n    C1 --&gt; C1B[运行时环境&lt;br&gt;RTE]\n    C1 --&gt; C1C[基础软件层&lt;br&gt;BSW]\n    C1 --&gt; C1D[微控制器抽象层&lt;br&gt;MCAL]\n\n    C1C --&gt; C1C1[服务层]\n    C1C --&gt; C1C2[ECU抽象层]\n    C1C --&gt; C1C3[复杂驱动&lt;br&gt;CDD]\n\n    C2 --&gt; C2A[自适应应用]\n    C2 --&gt; C2B[ARA::COM 等API]\n    C2 --&gt; C2C[自适应基础软件]\n    C2 --&gt; C2D[执行管理&lt;br&gt;等服务]\n\n    D --&gt; D1[系统配置]\n    D --&gt; D2[ECU配置]\n    D --&gt; D3[软件组件配置]\n    D --&gt; D4[Arctic Core, ISOLAR等工具链]\n\n    E --&gt; E1[AUTOSAR主规范]\n    E --&gt; E2[BSW与RTE规范]\n    E --&gt; E3[模板与描述文件规范&lt;br&gt;ARXML]\n    E --&gt; E4[CP与AP特定规范]\n\n    %% 关键连接关系\n    B2 -.-&gt; C1B\n    B3 -.-&gt; C1A\n    B3 -.-&gt; C2A\n    B4 -.-&gt; E3\n    D1 -.-&gt; E3\n    D2 -.-&gt; C1D\n    D3 -.-&gt; C1B\n\n\n\n思维导图\nmindmap\n  root((AUTOSAR知识体系))\n\n    核心理念\n      :标准化的汽车软件架构\n      :硬件与软件解耦\n      :软件组件化与重用性\n      :VFB虚拟功能总线\n\n    方法论\n      :系统配置描述\n        ::软件组件描述\n        ::ECU资源描述\n        ::系统约束描述\n      :开发流程\n        ::系统级设计\n        ::ECU级设计\n        ::软件组件开发\n\n    软件架构\n      经典平台(CP)\n        ::应用层\n          :::软件组件(SWC)\n          :::原子软件组件\n          :::组合软件组件\n        ::运行时环境(RTE)\n          :::SWC间通信\n          :::SWC与BSW通信\n        ::基础软件层(BSW)\n          :::服务层\n            ::::操作系统(OS)\n            ::::通信服务(COM)\n            ::::内存管理(NVM)\n            ::::诊断服务(DEM/DCM)\n          :::ECU抽象层\n            ::::通信硬件抽象\n            ::::内存硬件抽象\n            ::::I/O硬件抽象\n          :::微控制器抽象层(MCAL)\n            ::::驱动程序\n            ::::ADC, CAN, PWM等\n          :::复杂设备驱动(CDD)\n      自适应平台(AP)\n        ::自适应应用\n        ::自适应AUTOSAR运行时(ARA)\n          :::通信管理(ARA::COM)\n          :::持久化(ARA::Persistence)\n          :::诊断(ARA::DM)\n        ::功能集群\n          :::执行管理\n          :::状态管理\n          :::更新与配置管理\n        ::服务\n      共享功能\n        ::加密技术\n        ::网络管理\n        ::时间同步\n\n    标准与规范\n      :AUTOSAR标准文档\n        ::主规范\n        ::技术规范\n        ::方法论文档\n      :元模型与模板\n        ::ARXML格式\n        ::软件组件模板\n        ::ECU配置模板\n      :合规性测试\n        ::AUTOSAR合规性测试\n        ::软件组件合规性\n\n    工具与生态系统\n      :设计工具\n        ::系统设计工具\n        ::SWC设计工具\n        ::RTE生成工具\n      :配置工具\n        ::ECU配置工具\n        ::BSW配置工具\n        ::MCAL配置工具\n      :开发工具\n        ::代码生成工具\n        ::调试与测试工具\n        ::集成工具\n      :供应商支持\n        ::Vector\n        ::ETAS\n        ::Elektrobit\n        ::dSPACE\n\n    应用领域\n      :车身电子\n      :底盘控制\n      :动力总成\n      :高级驾驶辅助系统(ADAS)\n      :信息娱乐系统\n      :连接与车联网\n\n    优势与挑战\n      :优势\n        ::提高软件重用性\n        ::降低开发成本\n        ::提高软件质量\n        ::标准化接口\n      :挑战\n        ::学习曲线陡峭\n        ::工具链成本高\n        ::配置复杂性\n        ::资源消耗较大\n\n\n\n\n核心理念\n\n标准化的汽车软件架构\n硬件与软件解耦\n软件组件化与重用性\nVFB虚拟功能总线\n\n\n方法论\n\n统配置描述\n\n软件组件描述\n系统约束描述\n\n\n开发流程\n\n系统级设计\nECU级设计\n软件组件开发\n\n\n\n\n软件架构\n\n经典平台(CP)\n\n应用层\n\n软件组件(SWC)\n原子软件组件\n组合软件组件\n\n\n运行时环境(RTE)\n\nSWC间通信\nSWC与BSW通信\n\n\n基础软件层(BSW)\n\n服务层\n\n操作系统(OS)\n通信服务(COM)\n内存管理(NVM)\n诊断服务(DEM/DCM)\n\n\n\n\nECU抽象层\n\n通信硬件抽象\n内存硬件抽象\nI/O硬件抽象\n\n\n微控制器抽象层(MCAL)\n\n驱动程序\nADC, CAN, PWM等\n\n\n复杂设备驱动(CDD)\n\n\n自适应平台(AP)\n\n自适应应用\n自适应AUTOSAR运行时(ARA)\n\n通信管理(ARA::COM)\n持久化(ARA::Persistence)\n诊断(ARA::DM)\n\n\n功能集群\n\n执行管理\n状态管理\n更新与配置管理\n\n\n服务\n\n\n共享功能\n\n加密技术\n网络管理\n时间同步\n\n\n\n\n标准与规范\n\nAUTOSAR标准文档\n\n主规范\n技术规范\n方法论文档\n\n\n元模型与模板\n\nARXML格式\n软件组件模板\nECU配置模板\n\n\n合规性测试\n\nAUTOSAR合规性测试\n软件组件合规性\n\n\n\n\n工具与生态系统\n\n设计工具\n\n系统设计工具\nSWC设计工具\nRTE生成工具\n\n\n配置工具\n\nECU配置工具\nBSW配置工具\nMCAL配置工具\n\n\n开发工具\n\n代码生成工具\n调试与测试工具\n调试与测试工具\n\n\n供应商支持\n\nVector\nETAS\nElektrobit\ndSPACE\n\n\n\n\n应用领域\n\n车身电子\n底盘控制\n动力总成\n高级驾驶辅助系统(ADAS)\n信息娱乐系统\n连接与车联网\n\n\n优势与挑战\n\n优势\n\n提高软件重用性\n降低开发成本\n提高软件质量\n标准化接口\n\n\n挑战\n\n学习曲线陡峭\n工具链成本高\n配置复杂性\n资源消耗较大\n\n\n\n\n"},"Project/AUTOSAR/index":{"slug":"Project/AUTOSAR/index","filePath":"Project/AUTOSAR/index.md","title":"AUTOSAR","links":[],"tags":[],"content":""},"Project/AUTOSAR/应用领域":{"slug":"Project/AUTOSAR/应用领域","filePath":"Project/AUTOSAR/应用领域.md","title":"应用领域","links":["Archive/Read/build","Archive/Read/configuration","Project/AUTOSAR/核心理念","plugins/Latex","Project/AUTOSAR/方法论"],"tags":["Project","AUTOSAR"],"content":"\n\n                  \n                  Warning\n                  \n                \n\n\nThis part of the documentation will assume you have working knowledge in TypeScript and will include code snippets that describe the interface of what Quartz plugins should look like.\n\n\n\nQuartz’s plugins are a series of transformations over content. This is illustrated in the diagram of the processing pipeline below:\n\nAll plugins are defined as a function that takes in a single parameter for options type OptionType = object | undefined and return an object that corresponds to the type of plugin it is.\ntype OptionType = object | undefined\ntype QuartzPlugin&lt;Options extends OptionType = undefined&gt; = (opts?: Options) =&gt; QuartzPluginInstance\ntype QuartzPluginInstance =\n  | QuartzTransformerPluginInstance\n  | QuartzFilterPluginInstance\n  | QuartzEmitterPluginInstance\nThe following sections will go into detail for what methods can be implemented for each plugin type. Before we do that, let’s clarify a few more ambiguous types:\n\nBuildCtx is defined in quartz/ctx.ts. It consists of\n\nargv: The command line arguments passed to the Quartz build command\ncfg: The full Quartz configuration\nallSlugs: a list of all the valid content slugs (see 核心理念 for more information on what a slug is)\n\n\nStaticResources is defined in quartz/resources.tsx. It consists of\n\ncss: a list of CSS style definitions that should be loaded. A CSS style is described with the CSSResource type which is also defined in quartz/resources.tsx. It accepts either a source URL or the inline content of the stylesheet.\njs: a list of scripts that should be loaded. A script is described with the JSResource type which is also defined in quartz/resources.tsx. It allows you to define a load time (either before or after the DOM has been loaded), whether it should be a module, and either the source URL or the inline content of the script.\nadditionalHead: a list of JSX elements or functions that return JSX elements to be added to the &lt;head&gt; tag of the page. Functions receive the page’s data as an argument and can conditionally render elements.\n\n\n\nTransformers\nTransformers map over content, taking a Markdown file and outputting modified content or adding metadata to the file itself.\nexport type QuartzTransformerPluginInstance = {\n  name: string\n  textTransform?: (ctx: BuildCtx, src: string) =&gt; string\n  markdownPlugins?: (ctx: BuildCtx) =&gt; PluggableList\n  htmlPlugins?: (ctx: BuildCtx) =&gt; PluggableList\n  externalResources?: (ctx: BuildCtx) =&gt; Partial&lt;StaticResources&gt;\n}\nAll transformer plugins must define at least a name field to register the plugin and a few optional functions that allow you to hook into various parts of transforming a single Markdown file.\n\ntextTransform performs a text-to-text transformation before a file is parsed into the Markdown AST.\nmarkdownPlugins defines a list of remark plugins. remark is a tool that transforms Markdown to Markdown in a structured way.\nhtmlPlugins defines a list of rehype plugins. Similar to how remark works, rehype is a tool that transforms HTML to HTML in a structured way.\nexternalResources defines any external resources the plugin may need to load on the client-side for it to work properly.\n\nNormally for both remark and rehype, you can find existing plugins that you can use to . If you’d like to create your own remark or rehype plugin, checkout the guide to creating a plugin using unified (the underlying AST parser and transformer library).\nA good example of a transformer plugin that borrows from the remark and rehype ecosystems is the Latex plugin:\nquartz/plugins/transformers/latex.tsimport remarkMath from &quot;remark-math&quot;\nimport rehypeKatex from &quot;rehype-katex&quot;\nimport rehypeMathjax from &quot;rehype-mathjax/svg&quot;\nimport { QuartzTransformerPlugin } from &quot;../types&quot;\n \ninterface Options {\n  renderEngine: &quot;katex&quot; | &quot;mathjax&quot;\n}\n \nexport const Latex: QuartzTransformerPlugin&lt;Options&gt; = (opts?: Options) =&gt; {\n  const engine = opts?.renderEngine ?? &quot;katex&quot;\n  return {\n    name: &quot;Latex&quot;,\n    markdownPlugins() {\n      return [remarkMath]\n    },\n    htmlPlugins() {\n      if (engine === &quot;katex&quot;) {\n        // if you need to pass options into a plugin, you\n        // can use a tuple of [plugin, options]\n        return [[rehypeKatex, { output: &quot;html&quot; }]]\n      } else {\n        return [rehypeMathjax]\n      }\n    },\n    externalResources() {\n      if (engine === &quot;katex&quot;) {\n        return {\n          css: [\n            {\n              // base css\n              content: &quot;cdnjs.cloudflare.com/ajax/libs/KaTeX/0.16.9/katex.min.css&quot;,\n            },\n          ],\n          js: [\n            {\n              // fix copy behaviour: github.com/KaTeX/KaTeX/blob/main/contrib/copy-tex/README.md\n              src: &quot;cdnjs.cloudflare.com/ajax/libs/KaTeX/0.16.9/contrib/copy-tex.min.js&quot;,\n              loadTime: &quot;afterDOMReady&quot;,\n              contentType: &quot;external&quot;,\n            },\n          ],\n        }\n      }\n    },\n  }\n}\nAnother common thing that transformer plugins will do is parse a file and add extra data for that file:\nexport const AddWordCount: QuartzTransformerPlugin = () =&gt; {\n  return {\n    name: &quot;AddWordCount&quot;,\n    markdownPlugins() {\n      return [\n        () =&gt; {\n          return (tree, file) =&gt; {\n            // tree is an `mdast` root element\n            // file is a `vfile`\n            const text = file.value\n            const words = text.split(&quot; &quot;).length\n            file.data.wordcount = words\n          }\n        },\n      ]\n    },\n  }\n}\n \n// tell typescript about our custom data fields we are adding\n// other plugins will then also be aware of this data field\ndeclare module &quot;vfile&quot; {\n  interface DataMap {\n    wordcount: number\n  }\n}\nFinally, you can also perform transformations over Markdown or HTML ASTs using the visit function from the unist-util-visit package or the findAndReplace function from the mdast-util-find-and-replace package.\nexport const TextTransforms: QuartzTransformerPlugin = () =&gt; {\n  return {\n    name: &quot;TextTransforms&quot;,\n    markdownPlugins() {\n      return [() =&gt; {\n        return (tree, file) =&gt; {\n          // replace _text_ with the italics version\n          findAndReplace(tree, /_(.+)_/, (_value: string, ...capture: string[]) =&gt; {\n            // inner is the text inside of the () of the regex\n            const [inner] = capture\n            // return an mdast node\n            // github.com/syntax-tree/mdast\n            return {\n              type: &quot;emphasis&quot;,\n              children: [{ type: &#039;text&#039;, value: inner }]\n            }\n          })\n \n         // remove all links (replace with just the link content)\n         // match by &#039;type&#039; field on an mdast node\n         // github.com/syntax-tree/mdast#link in this example\n          visit(tree, &quot;link&quot;, (link: Link) =&gt; {\n            return {\n              type: &quot;paragraph&quot;\n              children: [{ type: &#039;text&#039;, value: link.title }]\n            }\n          })\n        }\n      }]\n    }\n  }\n}\nAll transformer plugins can be found under quartz/plugins/transformers. If you decide to write your own transformer plugin, don’t forget to re-export it under quartz/plugins/transformers/index.ts\nA parting word: transformer plugins are quite complex so don’t worry if you don’t get them right away. Take a look at the built in transformers and see how they operate over content to get a better sense for how to accomplish what you are trying to do.\nFilters\nFilters filter content, taking the output of all the transformers and determining what files to actually keep and what to discard.\nexport type QuartzFilterPlugin&lt;Options extends OptionType = undefined&gt; = (\n  opts?: Options,\n) =&gt; QuartzFilterPluginInstance\n \nexport type QuartzFilterPluginInstance = {\n  name: string\n  shouldPublish(ctx: BuildCtx, content: ProcessedContent): boolean\n}\nA filter plugin must define a name field and a shouldPublish function that takes in a piece of content that has been processed by all the transformers and returns a true or false depending on whether it should be passed to the emitter plugins or not.\nFor example, here is the built-in plugin for removing drafts:\nquartz/plugins/filters/draft.tsimport { QuartzFilterPlugin } from &quot;../types&quot;\n \nexport const RemoveDrafts: QuartzFilterPlugin&lt;{}&gt; = () =&gt; ({\n  name: &quot;RemoveDrafts&quot;,\n  shouldPublish(_ctx, [_tree, vfile]) {\n    // uses frontmatter parsed from transformers\n    const draftFlag: boolean = vfile.data?.draft ?? false\n    return !draftFlag\n  },\n})\nEmitters\nEmitters reduce over content, taking in a list of all the transformed and filtered content and creating output files.\nexport type QuartzEmitterPlugin&lt;Options extends OptionType = undefined&gt; = (\n  opts?: Options,\n) =&gt; QuartzEmitterPluginInstance\n \nexport type QuartzEmitterPluginInstance = {\n  name: string\n  emit(\n    ctx: BuildCtx,\n    content: ProcessedContent[],\n    resources: StaticResources,\n  ): Promise&lt;FilePath[]&gt; | AsyncGenerator&lt;FilePath&gt;\n  partialEmit?(\n    ctx: BuildCtx,\n    content: ProcessedContent[],\n    resources: StaticResources,\n    changeEvents: ChangeEvent[],\n  ): Promise&lt;FilePath[]&gt; | AsyncGenerator&lt;FilePath&gt; | null\n  getQuartzComponents(ctx: BuildCtx): QuartzComponent[]\n}\nAn emitter plugin must define a name field, an emit function, and a getQuartzComponents function. It can optionally implement a partialEmit function for incremental builds.\n\nemit is responsible for looking at all the parsed and filtered content and then appropriately creating files and returning a list of paths to files the plugin created.\npartialEmit is an optional function that enables incremental builds. It receives information about which files have changed (changeEvents) and can selectively rebuild only the necessary files. This is useful for optimizing build times in development mode. If partialEmit is undefined, it will default to the emit function.\ngetQuartzComponents declares which Quartz components the emitter uses to construct its pages.\n\nCreating new files can be done via regular Node fs module (i.e. fs.cp or fs.writeFile) or via the write function in quartz/plugins/emitters/helpers.ts if you are creating files that contain text. write has the following signature:\nexport type WriteOptions = (data: {\n  // the build context\n  ctx: BuildCtx\n  // the name of the file to emit (not including the file extension)\n  slug: FullSlug\n  // the file extension\n  ext: `.${string}` | &quot;&quot;\n  // the file content to add\n  content: string\n}) =&gt; Promise&lt;FilePath&gt;\nThis is a thin wrapper around writing to the appropriate output folder and ensuring that intermediate directories exist. If you choose to use the native Node fs APIs, ensure you emit to the argv.output folder as well.\nIf you are creating an emitter plugin that needs to render components, there are three more things to be aware of:\n\nYour component should use getQuartzComponents to declare a list of QuartzComponents that it uses to construct the page. See the page on 方法论 for more information.\nYou can use the renderPage function defined in quartz/components/renderPage.tsx to render Quartz components into HTML.\nIf you need to render an HTML AST to JSX, you can use the htmlToJsx function from quartz/util/jsx.ts. An example of this can be found in quartz/components/pages/Content.tsx.\n\nFor example, the following is a simplified version of the content page plugin that renders every single page.\nquartz/plugins/emitters/contentPage.tsxexport const ContentPage: QuartzEmitterPlugin = () =&gt; {\n  // construct the layout\n  const layout: FullPageLayout = {\n    ...sharedPageComponents,\n    ...defaultContentPageLayout,\n    pageBody: Content(),\n  }\n  const { head, header, beforeBody, pageBody, afterBody, left, right, footer } = layout\n  return {\n    name: &quot;ContentPage&quot;,\n    getQuartzComponents() {\n      return [head, ...header, ...beforeBody, pageBody, ...afterBody, ...left, ...right, footer]\n    },\n    async emit(ctx, content, resources, emit): Promise&lt;FilePath[]&gt; {\n      const cfg = ctx.cfg.configuration\n      const fps: FilePath[] = []\n      const allFiles = content.map((c) =&gt; c[1].data)\n      for (const [tree, file] of content) {\n        const slug = canonicalizeServer(file.data.slug!)\n        const externalResources = pageResources(slug, file.data, resources)\n        const componentData: QuartzComponentProps = {\n          fileData: file.data,\n          externalResources,\n          cfg,\n          children: [],\n          tree,\n          allFiles,\n        }\n \n        const content = renderPage(cfg, slug, componentData, opts, externalResources)\n        const fp = await emit({\n          content,\n          slug: file.data.slug!,\n          ext: &quot;.html&quot;,\n        })\n \n        fps.push(fp)\n      }\n      return fps\n    },\n  }\n}\nNote that it takes in a FullPageLayout as the options. It’s made by combining a SharedLayout and a PageLayout both of which are provided through the quartz.layout.ts file.\n\n\n                  \n                  Hint\n                  \n                \n\n\nLook in quartz/plugins for more examples of plugins in Quartz as reference for your own plugins!\n\n\n"},"Project/AUTOSAR/方法论":{"slug":"Project/AUTOSAR/方法论","filePath":"Project/AUTOSAR/方法论.md","title":"方法论","links":["Project/AUTOSAR/应用领域","SPA-Routing","Archive/Read/configuration"],"tags":["Project","AUTOSAR"],"content":"\n\n                  \n                  Warning\n                  \n                \n\n\nThis guide assumes you have experience writing JavaScript and are familiar with TypeScript.\n\n\n\nNormally on the web, we write layout code using HTML which looks something like the following:\n&lt;article&gt;\n  &lt;h1&gt;An article header&lt;/h1&gt;\n  &lt;p&gt;Some content&lt;/p&gt;\n&lt;/article&gt;\nThis piece of HTML represents an article with a leading header that says “An article header” and a paragraph that contains the text “Some content”. This is combined with CSS to style the page and JavaScript to add interactivity.\nHowever, HTML doesn’t let you create reusable templates. If you wanted to create a new page, you would need to copy and paste the above snippet and edit the header and content yourself. This isn’t great if we have a lot of content on our site that shares a lot of similar layout. The smart people who created React also had similar complaints and invented the concept of Components — JavaScript functions that return JSX — to solve the code duplication problem.\nIn effect, components allow you to write a JavaScript function that takes some data and produces HTML as an output. While Quartz doesn’t use React, it uses the same component concept to allow you to easily express layout templates in your Quartz site.\nAn Example Component\nConstructor\nComponent files are written in .tsx files that live in the quartz/components folder. These are re-exported in quartz/components/index.ts so you can use them in layouts and other components more easily.\nEach component file should have a default export that satisfies the QuartzComponentConstructor function signature. It’s a function that takes in a single optional parameter opts and returns a Quartz Component. The type of the parameters opts is defined by the interface Options which you as the component creator also decide.\nIn your component, you can use the values from the configuration option to change the rendering behaviour inside of your component. For example, the component in the code snippet below will not render if the favouriteNumber option is below 0.\ninterface Options {\n  favouriteNumber: number\n}\n \nconst defaultOptions: Options = {\n  favouriteNumber: 42,\n}\n \nexport default ((userOpts?: Options) =&gt; {\n  const opts = { ...userOpts, ...defaultOpts }\n  function YourComponent(props: QuartzComponentProps) {\n    if (opts.favouriteNumber &lt; 0) {\n      return null\n    }\n \n    return &lt;p&gt;My favourite number is {opts.favouriteNumber}&lt;/p&gt;\n  }\n \n  return YourComponent\n}) satisfies QuartzComponentConstructor\nProps\nThe Quartz component itself (lines 11-17 highlighted above) looks like a React component. It takes in properties (sometimes called props) and returns JSX.\nAll Quartz components accept the same set of props:\nquartz/components/types.ts// simplified for sake of demonstration\nexport type QuartzComponentProps = {\n  fileData: QuartzPluginData\n  cfg: GlobalConfiguration\n  tree: Node&lt;QuartzPluginData&gt;\n  allFiles: QuartzPluginData[]\n  displayClass?: &quot;mobile-only&quot; | &quot;desktop-only&quot;\n}\n\nfileData: Any metadata plugins may have added to the current page.\n\nfileData.slug: slug of the current page.\nfileData.frontmatter: any frontmatter parsed.\n\n\ncfg: The configuration field in quartz.config.ts.\ntree: the resulting HTML AST after processing and transforming the file. This is useful if you’d like to render the content using hast-util-to-jsx-runtime (you can find an example of this in quartz/components/pages/Content.tsx).\nallFiles: Metadata for all files that have been parsed. Useful for doing page listings or figuring out the overall site structure.\ndisplayClass: a utility class that indicates a preference from the user about how to render it in a mobile or desktop setting. Helpful if you want to conditionally hide a component on mobile or desktop.\n\nStyling\nQuartz components can also define a .css property on the actual function component which will get picked up by Quartz. This is expected to be a CSS string which can either be inlined or imported from a .scss file.\nNote that inlined styles must be plain vanilla CSS:\nquartz/components/YourComponent.tsxexport default (() =&gt; {\n  function YourComponent() {\n    return &lt;p class=&quot;red-text&quot;&gt;Example Component&lt;/p&gt;\n  }\n \n  YourComponent.css = `\n  p.red-text {\n    color: red;\n  }\n  `\n \n  return YourComponent\n}) satisfies QuartzComponentConstructor\nImported styles, however, can be from SCSS files:\nquartz/components/YourComponent.tsx// assuming your stylesheet is in quartz/components/styles/YourComponent.scss\nimport styles from &quot;./styles/YourComponent.scss&quot;\n \nexport default (() =&gt; {\n  function YourComponent() {\n    return &lt;p&gt;Example Component&lt;/p&gt;\n  }\n \n  YourComponent.css = styles\n  return YourComponent\n}) satisfies QuartzComponentConstructor\n\n\n                  \n                  Warning\n                  \n                \n\n\nQuartz does not use CSS modules so any styles you declare here apply globally. If you only want it to apply to your component, make sure you use specific class names and selectors.\n\n\n\nScripts and Interactivity\nWhat about interactivity? Suppose you want to add an-click handler for example. Like the .css property on the component, you can also declare .beforeDOMLoaded and .afterDOMLoaded properties that are strings that contain the script.\nquartz/components/YourComponent.tsxexport default (() =&gt; {\n  function YourComponent() {\n    return &lt;button id=&quot;btn&quot;&gt;Click me&lt;/button&gt;\n  }\n \n  YourComponent.beforeDOMLoaded = `\n  console.log(&quot;hello from before the page loads!&quot;)\n  `\n \n  YourComponent.afterDOMLoaded = `\n  document.getElementById(&#039;btn&#039;).onclick = () =&gt; {\n    alert(&#039;button clicked!&#039;)\n  }\n  `\n  return YourComponent\n}) satisfies QuartzComponentConstructor\n\n\n                  \n                  Hint\n                  \n                \n\n\nFor those coming from React, Quartz components are different from React components in that it only uses JSX for templating and layout. Hooks like useEffect, useState, etc. are not rendered and other properties that accept functions like onClick handlers will not work. Instead, do it using a regular JS script that modifies the DOM element directly.\n\n\n\nAs the names suggest, the .beforeDOMLoaded scripts are executed before the page is done loading so it doesn’t have access to any elements on the page. This is mostly used to prefetch any critical data.\nThe .afterDOMLoaded script executes once the page has been completely loaded. This is a good place to setup anything that should last for the duration of a site visit (e.g. getting something saved from local storage).\nIf you need to create an afterDOMLoaded script that depends on page specific elements that may change when navigating to a new page, you can listen for the &quot;nav&quot; event that gets fired whenever a page loads (which may happen on navigation if SPA Routing is enabled).\ndocument.addEventListener(&quot;nav&quot;, () =&gt; {\n  // do page specific logic here\n  // e.g. attach event listeners\n  const toggleSwitch = document.querySelector(&quot;#switch&quot;) as HTMLInputElement\n  toggleSwitch.addEventListener(&quot;change&quot;, switchTheme)\n  window.addCleanup(() =&gt; toggleSwitch.removeEventListener(&quot;change&quot;, switchTheme))\n})\nYou can also add the equivalent of a beforeunload event for SPA Routing via the prenav event.\ndocument.addEventListener(&quot;prenav&quot;, () =&gt; {\n  // executed after an SPA navigation is triggered but\n  // before the page is replaced\n  // one usage pattern is to store things in sessionStorage\n  // in the prenav and then conditionally load then in the consequent\n  // nav\n})\nIt is best practice to track any event handlers via window.addCleanup to prevent memory leaks.\nThis will get called on page navigation.\nImporting Code\nOf course, it isn’t always practical (nor desired!) to write your code as a string literal in the component.\nQuartz supports importing component code through .inline.ts files.\nquartz/components/YourComponent.tsx// @ts-ignore: typescript doesn&#039;t know about our inline bundling system\n// so we need to silence the error\nimport script from &quot;./scripts/graph.inline&quot;\n \nexport default (() =&gt; {\n  function YourComponent() {\n    return &lt;button id=&quot;btn&quot;&gt;Click me&lt;/button&gt;\n  }\n \n  YourComponent.afterDOMLoaded = script\n  return YourComponent\n}) satisfies QuartzComponentConstructor\nquartz/components/scripts/graph.inline.ts// any imports here are bundled for the browser\nimport * as d3 from &quot;d3&quot;\n \ndocument.getElementById(&quot;btn&quot;).onclick = () =&gt; {\n  alert(&quot;button clicked!&quot;)\n}\nAdditionally, like what is shown in the example above, you can import packages in .inline.ts files. This will be bundled by Quartz and included in the actual script.\nUsing a Component\nAfter creating your custom component, re-export it in quartz/components/index.ts:\nquartz/components/index.tsimport ArticleTitle from &quot;./ArticleTitle&quot;\nimport Content from &quot;./pages/Content&quot;\nimport Darkmode from &quot;./Darkmode&quot;\nimport YourComponent from &quot;./YourComponent&quot;\n \nexport { ArticleTitle, Content, Darkmode, YourComponent }\nThen, you can use it like any other component in quartz.layout.ts via Component.YourComponent(). See the layout section for more details.\nAs Quartz components are just functions that return React components, you can compositionally use them in other Quartz components.\nquartz/components/AnotherComponent.tsximport YourComponentConstructor from &quot;./YourComponent&quot;\n \nexport default (() =&gt; {\n  const YourComponent = YourComponentConstructor()\n \n  function AnotherComponent(props: QuartzComponentProps) {\n    return (\n      &lt;div&gt;\n        &lt;p&gt;It&#039;s nested!&lt;/p&gt;\n        &lt;YourComponent {...props} /&gt;\n      &lt;/div&gt;\n    )\n  }\n \n  return AnotherComponent\n}) satisfies QuartzComponentConstructor\n\n\n                  \n                  Hint\n                  \n                \n\n\nLook in quartz/components for more examples of components in Quartz as reference for your own components!\n\n\n"},"Project/AUTOSAR/标准与规范":{"slug":"Project/AUTOSAR/标准与规范","filePath":"Project/AUTOSAR/标准与规范.md","title":"标准与规范","links":[],"tags":["Project","AUTOSAR"],"content":""},"Project/AUTOSAR/核心理念":{"slug":"Project/AUTOSAR/核心理念","filePath":"Project/AUTOSAR/核心理念.md","title":"核心理念","links":[],"tags":["Project","AUTOSAR"],"content":"Paths are pretty complex to reason about because, especially for a static site generator, they can come from so many places.\nA full file path to a piece of content? Also a path. What about a slug for a piece of content? Yet another path.\nIt would be silly to type these all as string and call it a day as it’s pretty common to accidentally mistake one type of path for another. Unfortunately, TypeScript does not have nominal types for type aliases meaning even if you made custom types of a server-side slug or a client-slug slug, you can still accidentally assign one to another and TypeScript wouldn’t catch it.\nLuckily, we can mimic nominal typing using brands.\n// instead of\ntype FullSlug = string\n \n// we do\ntype FullSlug = string &amp; { __brand: &quot;full&quot; }\n \n// that way, the following will fail typechecking\nconst slug: FullSlug = &quot;some random string&quot;\nWhile this prevents most typing mistakes within our nominal typing system (e.g. mistaking a server slug for a client slug), it doesn’t prevent us from accidentally mistaking a string for a client slug when we forcibly cast it.\nThus, we still need to be careful when casting from a string to one of these nominal types in the ‘entrypoints’, illustrated with hexagon shapes in the diagram below.\nThe following diagram draws the relationships between all the path sources, nominal path types, and what functions in quartz/path.ts convert between them.\ngraph LR\n    Browser{{Browser}} --&gt; Window{{Body}} &amp; LinkElement{{Link Element}}\n    Window --&quot;getFullSlug()&quot;--&gt; FullSlug[Full Slug]\n    LinkElement --&quot;.href&quot;--&gt; Relative[Relative URL]\n    FullSlug --&quot;simplifySlug()&quot; --&gt; SimpleSlug[Simple Slug]\n    SimpleSlug --&quot;pathToRoot()&quot;--&gt; Relative\n    SimpleSlug --&quot;resolveRelative()&quot; --&gt; Relative\n    MD{{Markdown File}} --&gt; FilePath{{File Path}} &amp; Links[Markdown links]\n    Links --&quot;transformLink()&quot;--&gt; Relative\n    FilePath --&quot;slugifyFilePath()&quot;--&gt; FullSlug[Full Slug]\n    style FullSlug stroke-width:4px\n\nHere are the main types of slugs with a rough description of each type of path:\n\nFilePath: a real file path to a file on disk. Cannot be relative and must have a file extension.\nFullSlug: cannot be relative and may not have leading or trailing slashes. It can have index as it’s last segment. Use this wherever possible is it’s the most ‘general’ interpretation of a slug.\nSimpleSlug: cannot be relative and shouldn’t have /index as an ending or a file extension. It can however have a trailing slash to indicate a folder path.\nRelativeURL: must start with . or .. to indicate it’s a relative URL. Shouldn’t have /index as an ending or a file extension but can contain a trailing slash.\n\nTo get a clearer picture of how these relate to each other, take a look at the path tests in quartz/util/path.test.ts."},"Project/AUTOSAR/软件架构":{"slug":"Project/AUTOSAR/软件架构","filePath":"Project/AUTOSAR/软件架构.md","title":"软件架构","links":["Archive/Read/configuration","Project/AUTOSAR/核心理念","Archive/Read/layout","SPA-Routing","Project/AUTOSAR/应用领域"],"tags":["Project","AUTOSAR"],"content":"Quartz is a static site generator. How does it work?\nThis question is best answered by tracing what happens when a user (you!) runs npx quartz build in the command line:\nOn the server\n\nAfter running npx quartz build, npm will look at package.json to find the bin entry for quartz which points at ./quartz/bootstrap-cli.mjs.\nThis file has a shebang line at the top which tells npm to execute it using Node.\nbootstrap-cli.mjs is responsible for a few things:\n\nParsing the command-line arguments using yargs.\nTranspiling and bundling the rest of Quartz (which is in Typescript) to regular JavaScript using esbuild. The esbuild configuration here is slightly special as it also handles .scss file imports using esbuild-sass-plugin v2. Additionally, we bundle ‘inline’ client-side scripts (any .inline.ts file) that components declare using a custom esbuild plugin that runs another instance of esbuild which bundles for the browser instead of node. Modules of both types are imported as plain text.\nRunning the local preview server if --serve is set. This starts two servers:\n\nA WebSocket server on port 3001 to handle hot-reload signals. This tracks all inbound connections and sends a ‘rebuild’ message a server-side change is detected (either content or configuration).\nAn HTTP file-server on a user defined port (normally 8080) to serve the actual website files.\n\n\nIf the --serve flag is set, it also starts a file watcher to detect source-code changes (e.g. anything that is .ts, .tsx, .scss, or packager files). On a change, we rebuild the module (step 2 above) using esbuild’s rebuild API which drastically reduces the build times.\nAfter transpiling the main Quartz build module (quartz/build.ts), we write it to a cache file .quartz-cache/transpiled-build.mjs and then dynamically import this using await import(cacheFile). However, we need to be pretty smart about how to bust Node’s import cache so we add a random query string to fake Node into thinking it’s a new module. This does, however, cause memory leaks so we just hope that the user doesn’t hot-reload their configuration too many times in a single session :)) (it leaks about ~350kB memory on each reload). After importing the module, we then invoke it, passing in the command line arguments we parsed earlier along with a callback function to signal the client to refresh.\n\n\nIn build.ts, we start by installing source map support manually to account for the query string cache busting hack we introduced earlier. Then, we start processing content:\n\nClean the output directory.\nRecursively glob all files in the content folder, respecting the .gitignore.\nParse the Markdown files.\n\nQuartz detects the number of threads available and chooses to spawn worker threads if there are &gt;128 pieces of content to parse (rough heuristic). If it needs to spawn workers, it will invoke esbuild again to transpile the worker script quartz/worker.ts. Then, a work-stealing workerpool is then created and batches of 128 files are assigned to workers.\nEach worker (or just the main thread if there is no concurrency) creates a unified parser based off of the plugins defined in the configuration.\nParsing has three steps:\n\nRead the file into a vfile.\nApplied plugin-defined text transformations over the content.\nSlugify the file path and store it in the data for the file. See the page on 核心理念 for more details about how path logic works in Quartz (spoiler: its complicated).\nMarkdown parsing using remark-parse (text to mdast).\nApply plugin-defined Markdown-to-Markdown transformations.\nConvert Markdown into HTML using remark-rehype (mdast to hast).\nApply plugin-defined HTML-to-HTML transformations.\n\n\n\n\nFilter out unwanted content using plugins.\nEmit files using plugins.\n\nGather all the static resources (e.g. external CSS, JS modules, etc.) each emitter plugin declares.\nEmitters that emit HTML files do a bit of extra work here as they need to transform the hast produced in the parse step to JSX. This is done using hast-util-to-jsx-runtime with the Preact runtime. Finally, the JSX is rendered to HTML using preact-render-to-string which statically renders the JSX to HTML (i.e. doesn’t care about useState, useEffect, or any other React/Preact interactive bits). Here, we also do a bunch of fun stuff like assemble the page layout from quartz.layout.ts, assemble all the inline scripts that actually get shipped to the client, and all the transpiled styles. The bulk of this logic can be found in quartz/components/renderPage.tsx. Other fun things of note:\n\nCSS is minified and transformed using Lightning CSS to add vendor prefixes and do syntax lowering.\nScripts are split into beforeDOMLoaded and afterDOMLoaded and are inserted in the &lt;head&gt; and &lt;body&gt; respectively.\n\n\nFinally, each emitter plugin is responsible for emitting and writing it’s own emitted files to disk.\n\n\nIf the --serve flag was detected, we also set up another file watcher to detect content changes (only .md files). We keep a content map that tracks the parsed AST and plugin data for each slug and update this on file changes. Newly added or modified paths are rebuilt and added to the content map. Then, all the filters and emitters are run over the resulting content map. This file watcher is debounced with a threshold of 250ms. On success, we send a client refresh signal using the passed in callback function.\n\n\n\nOn the client\n\nThe browser opens a Quartz page and loads the HTML. The &lt;head&gt; also links to page styles (emitted to public/index.css) and page-critical JS (emitted to public/prescript.js)\nThen, once the body is loaded, the browser loads the non-critical JS (emitted to public/postscript.js)\nOnce the page is done loading, the page will then dispatch a custom synthetic browser event &quot;nav&quot;. This is used so client-side scripts declared by components can ‘setup’ anything that requires access to the page DOM.\n\nIf the enableSPA option is enabled in the configuration, this &quot;nav&quot; event is also fired on any client-navigation to allow for components to unregister and reregister any event handlers and state.\nIf it’s not, we wire up the &quot;nav&quot; event to just be fired a single time after page load to allow for consistency across how state is setup across both SPA and non-SPA contexts.\n\n\n\nThe architecture and design of the plugin system was intentionally left pretty vague here as this is described in much more depth in the guide on making your own plugin."},"Project/Project":{"slug":"Project/Project","filePath":"Project/Project.md","title":"Project","links":["Project/AUTOSAR/AUTOSAR"],"tags":[],"content":"\n\nAUTOSAR\n"},"Project/index":{"slug":"Project/index","filePath":"Project/index.md","title":"Project","links":[],"tags":[],"content":""},"Resource/Education/index":{"slug":"Resource/Education/index","filePath":"Resource/Education/index.md","title":"Education","links":["Resource/Education/一年级数学","Resource/Education/一年级英语","Resource/Education/一年级语文"],"tags":[],"content":"\n小学一年级\n\n一年级数学\n一年级英语\n一年级语文\n\n\n"},"Resource/Education/一年级数学":{"slug":"Resource/Education/一年级数学","filePath":"Resource/Education/一年级数学.md","title":"一年级数学","links":["images/Math1.png"],"tags":["Math"],"content":"mindmap\n  root(小学数学)\n    数与代数\n      数的认识\n        1-100的读写\n        例子 35读作三十五\n        练习 写出68和100\n        数位 十位和个位\n        例子 25的十位是2个位是5\n        数的大小比较\n        例子 19小于21\n        练习 15和20比较 30和30比较\n      数的运算\n        20以内加法\n        例子 5加3等于8\n        练习 7加6等于\n        20以内减法\n        例子 9减4等于5\n        练习 15减8等于\n        凑十法\n        例子 9加5等于9加1加4等于14\n        破十法\n        例子 15减8等于10减8加5等于7\n        简单应用题\n        例子 小明有5个苹果妈妈又给他3个现在有几个\n    图形与几何\n      认识图形\n        平面图形\n          长方形\n          正方形\n          三角形\n          圆形\n        立体图形\n          长方体\n          正方体\n          圆柱\n          球\n        例子 找出教室中的长方体\n        练习 画出正方形和三角形\n      位置与顺序\n        上下左右前后\n        例子 铅笔在书的左边\n        练习 描述物品的相对位置\n    分类与统计\n      简单分类\n        按颜色分\n        按形状分\n        按大小分\n        例子 将积木按颜色分类\n        练习 将玩具分类\n      简单统计\n        用符号记录\n        例子 用心形记录喜欢的水果数量\n        数一数比多少\n        练习 统计班级同学喜欢的颜色\n    认识钟表\n      整时\n      例子 8点整\n      练习 画出3时的钟面\n      半时\n      例子 8点半\n      练习 说出钟面显示的时间\n    认识人民币\n      元角分\n      例子 1元等于10角\n      练习 计算2元5角加3元\n    找规律\n      颜色规律\n      例子 红蓝红蓝红\n      形状规律\n      例子 三角正方三角正方三角\n      数字规律\n      例子 2 4 6 8\n      练习 接着画规律图案\n\n\n资源下载\n\n\n\n点我⬇️\n"},"Resource/Education/一年级英语":{"slug":"Resource/Education/一年级英语","filePath":"Resource/Education/一年级英语.md","title":"一年级英语","links":["images/English1.png"],"tags":["English"],"content":"mindmap\n  root(小学英语)\n    字母\n      字母名 Letter Name\n        A B C D E F G\n        H I J K L M N\n        O P Q R S T\n        U V W X Y Z\n        例子 A-B-C Song\n        练习 按顺序说出字母\n      字母音 Letter Sound\n        A for Apple\n        B for Ball\n        C for Cat\n        例子 发音练习 a a apple\n        练习 说出以B开头的单词\n      大小写书写\n        大写 A B C D\n        小写 a b c d\n        例子 正确书写字母Aa\n        练习 抄写字母E-H\n    词汇\n      动物 Animals\n        cat猫 dog狗 bird鸟\n        fish鱼 tiger老虎 panda熊猫\n        例子 I see a cat\n        练习 说出3种动物名称\n      颜色 Colors\n        red红色 blue蓝色 yellow黄色\n        green绿色 orange橙色 purple紫色\n        例子 The apple is red\n        练习 指出教室中的颜色\n      数字 Numbers\n        one1 two2 three3\n        four4 five5 six6\n        seven7 eight8 nine9 ten10\n        例子 I have two eyes\n        练习 数一数桌上有几本书\n      食物 Food\n        apple苹果 banana香蕉 cake蛋糕\n        milk牛奶 water水 egg鸡蛋\n        例子 I like apples\n        练习 说出你喜欢的食物\n      身体部位 Body\n        eye眼睛 ear耳朵 nose鼻子\n        mouth嘴巴 hand手 foot脚\n        例子 Touch your nose\n        练习 指出身体部位\n      家庭 Family\n        dad爸爸 mom妈妈 grandpa爷爷外公\n        grandma奶奶外婆 sister姐妹 brother兄弟\n        例子 This is my mom\n        练习 介绍你的家人\n    日常用语\n      问候 Greetings\n        Hello Hi\n        Good morning\n        Goodbye Bye-bye\n        例子 早上见到老师说Good morning\n        练习 和同学用英语打招呼\n      礼貌用语 Politeness\n        Please\n        Thank you\n        You are welcome\n        Sorry\n        例子 Thank you You are welcome\n        练习 情景对话练习\n      问题与回答 Q and A\n        What is your name\n        My name is\n        How are you\n        I am fine thank you\n        How old are you\n        I am six\n        例子 互相询问姓名和年龄\n        练习 问答练习\n    歌曲童谣\n      ABC Song 字母歌\n      Hello Song 你好歌\n      Ten Little Indians 十个印第安小人\n      Twinkle Twinkle Little Star 小星星\n      例子 学唱ABC Song\n      练习 表演一首英文歌曲\n    简单句型\n      This is 这是\n        This is my book\n        This is a pen\n        例子 用This is介绍物品\n        练习 用This is造句\n      I like 我喜欢\n        I like apples\n        I like dogs\n        例子 表达自己的喜好\n        练习 说说你喜欢的事物\n      I can 我会\n        I can sing\n        I can jump\n        例子 展示自己能做的事\n        练习 用I can造句\n      I see 我看见\n        I see a bird\n        I see a red car\n        例子 描述看到的东西\n        练习 说出在教室里看到的事物\n\n\n\n资源下载\n\n\n\n点我⬇️\n"},"Resource/Education/一年级语文":{"slug":"Resource/Education/一年级语文","filePath":"Resource/Education/一年级语文.md","title":"一年级语文","links":["images/Chinese1.png"],"tags":["Chinese"],"content":"mindmap\n  root(小学语文)\n    汉语拼音\n      声母 23个\n        b p m f d t n l\n        g k h j q x\n        zh ch sh r z c s\n        y w\n        例子 b和a拼读为ba\n        练习 拼读b和a m和a\n      韵母\n        单韵母 6个 a o e i u ü\n        复韵母 ai ei ui ao ou iu\n        鼻韵母 an en in un ün ang eng ing ong\n        例子 m和a拼读为ma\n        练习 区分a和an\n      整体认读音节 16个\n        zhi chi shi ri zi ci si\n        yi wu yu ye yue yuan yin yun ying\n        例子 yi衣 wu五\n        练习 认读整体认读音节\n      声调\n        一声 mā\n        二声 má\n        三声 mǎ\n        四声 mà\n        例子 ma的四个声调\n        练习 给ma标上四个声调\n    识字与写字\n      常用汉字 300-500个\n        天地人你我他\n        一二三十木禾\n        上下土个大小\n        例子 木加木等于林\n        练习 写出5个学过的汉字\n      笔画与笔顺\n        基本笔画 横竖撇捺点提\n        笔顺规则 先横后竖先撇后捺从上到下从左到右\n        例子 十字先写横再写竖\n        练习 按正确笔顺写木字\n      偏旁部首\n        口字旁 唱听叫\n        提手旁 打把找\n        三点水 河海流\n        例子 单人旁加尔等于你\n        练习 找出带有口字旁的字\n    阅读\n      朗读\n        正确 不读错字\n        流利 不加字不漏字\n        有感情 注意语气和停顿\n        例子 朗读小小的船\n        练习 有感情地朗读课文\n      背诵\n        古诗 咏鹅静夜思\n        短文 春天来了\n        例子 背诵悯农\n        练习 背诵喜欢的儿歌\n      课外阅读\n        绘本 猜猜我有多爱你\n        童话 三只小猪\n        儿歌 小星星\n        例子 阅读绘本并复述故事\n        练习 每天阅读15分钟\n    口语交际\n      倾听\n        认真听别人讲话\n        努力了解主要内容\n        例子 听故事后回答问题\n        练习 复述听到的小故事\n      表达\n        大胆说\n        说完整的话\n        例子 介绍自己的玩具\n        练习 说说周末做了什么\n      看图说话\n        观察图画\n        用完整句子描述\n        例子 描述图画中的场景\n        练习 根据图画讲故事\n    写话\n      从一句话开始\n        谁在哪里干什么\n        例子 我在公园里玩\n        练习 用妈妈写一句话\n      常用标点\n        逗号 表示停顿\n        句号 表示一句话结束\n        问号 表示疑问\n        感叹号 表示感叹\n        例子 今天天气真好\n        练习 给句子加上标点\n\n\n\n\n资源下载\n\n\n\n点我⬇️\n"},"Resource/GitHub/Latex":{"slug":"Resource/GitHub/Latex","filePath":"Resource/GitHub/Latex.md","title":"Latex","links":["features/Latex","Archive/Read/configuration"],"tags":["plugin/transformer"],"content":"This plugin adds LaTeX support to Quartz. See Latex for more information.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin accepts the following configuration options:\n\nrenderEngine: the engine to use to render LaTeX equations. Can be &quot;katex&quot; for KaTeX, &quot;mathjax&quot; for MathJax SVG rendering, or &quot;typst&quot; for Typst (a new way to compose LaTeX equation). Defaults to KaTeX.\ncustomMacros: custom macros for all LaTeX blocks. It takes the form of a key-value pair where the key is a new command name and the value is the expansion of the macro. For example: {&quot;\\\\R&quot;: &quot;\\\\mathbb{R}&quot;}\n\n\n\n                  \n                  Typst support \n                  \n                \n\n\nCurrently, typst doesn’t support inline-math\n\n\n\nAPI\n\nCategory: Transformer\nFunction name: Plugin.Latex().\nSource: quartz/plugins/transformers/latex.ts.\n"},"Resource/GitHub/NotFoundPage":{"slug":"Resource/GitHub/NotFoundPage","filePath":"Resource/GitHub/NotFoundPage.md","title":"NotFoundPage","links":["Archive/Read/configuration"],"tags":["plugin/emitter"],"content":"This plugin emits a 404 (Not Found) page for broken or non-existent URLs.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin has no configuration options.\nAPI\n\nCategory: Emitter\nFunction name: Plugin.NotFoundPage().\nSource: quartz/plugins/emitters/404.tsx.\n"},"Resource/GitHub/ObsidianFlavoredMarkdown":{"slug":"Resource/GitHub/ObsidianFlavoredMarkdown","filePath":"Resource/GitHub/ObsidianFlavoredMarkdown.md","title":"ObsidianFlavoredMarkdown","links":["Area/EE/工业互联网","Archive/Read/configuration","Area/EE/处理器架构","Area/EE/计算机组成原理","Area/EE/RTOS"],"tags":["plugin/transformer"],"content":"This plugin provides support for 工业互联网.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin accepts the following configuration options:\n\ncomments: If true (default), enables parsing of %% style Obsidian comment blocks.\nhighlight: If true (default), enables parsing of == style highlights within content.\nwikilinks:If true (default), turns 处理器架构 into regular links.\ncallouts: If true (default), adds support for callout blocks for emphasizing content.\nmermaid: If true (default), enables Mermaid diagram rendering within Markdown files.\nparseTags: If true (default), parses and links tags within the content.\nparseArrows: If true (default), transforms arrow symbols into their HTML character equivalents.\nparseBlockReferences: If true (default), handles block references, linking to specific content blocks.\nenableInHtmlEmbed: If true, allows embedding of content directly within HTML. Defaults to false.\nenableYouTubeEmbed: If true (default), enables the embedding of YouTube videos and playlists using external image Markdown syntax.\nenableVideoEmbed: If true (default), enables the embedding of video files.\nenableCheckbox: If true, adds support for interactive checkboxes in content. Defaults to false.\ndisableBrokenWikilinks: If true, replaces links to non-existent notes with a dimmed, disabled link. Defaults to false.\n\n\n\n                  \n                  Warning\n                  \n                \n\n\nDon’t remove this plugin if you’re using Obsidian to author the content!\n\n\n\nAPI\n\nCategory: Transformer\nFunction name: Plugin.ObsidianFlavoredMarkdown().\nSource: quartz/plugins/transformers/ofm.ts\n"},"Resource/GitHub/OxHugoFlavoredMarkdown":{"slug":"Resource/GitHub/OxHugoFlavoredMarkdown","filePath":"Resource/GitHub/OxHugoFlavoredMarkdown.md","title":"OxHugoFlavoredMarkdown","links":["Area/EE/MCU","Archive/Read/configuration","Area/EE/处理器架构","features/Latex","Resource/GitHub/ObsidianFlavoredMarkdown","Resource/RSS/Frontmatter"],"tags":["plugin/transformer"],"content":"This plugin provides support for ox-hugo compatibility. See MCU for more information.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin accepts the following configuration options:\n\nwikilinks: If true (default), converts Hugo {{ relref }} shortcodes to Quartz 处理器架构.\nremovePredefinedAnchor: If true (default), strips predefined anchors from headings.\nremoveHugoShortcode: If true (default), removes Hugo shortcode syntax ({{}}) from the content.\nreplaceFigureWithMdImg: If true (default), replaces &lt;figure/&gt; with ![]().\nreplaceOrgLatex: If true (default), converts Org-mode Latex fragments to Quartz-compatible LaTeX wrapped in $ (for inline) and $$ (for block equations).\n\n\n\n                  \n                  Warning\n                  \n                \n\n\nWhile you can use this together with ObsidianFlavoredMarkdown, it’s not recommended because it might mutate the file in unexpected ways. Use with caution.\nIf you use toml frontmatter, make sure to configure the Frontmatter plugin accordingly. See MCU for an example.\n\n\n\nAPI\n\nCategory: Transformer\nFunction name: Plugin.OxHugoFlavoredMarkdown().\nSource: quartz/plugins/transformers/oxhugofm.ts.\n"},"Resource/GitHub/RemoveDrafts":{"slug":"Resource/GitHub/RemoveDrafts","filePath":"Resource/GitHub/RemoveDrafts.md","title":"RemoveDrafts","links":["Area/EE/英语","Archive/Read/configuration"],"tags":["plugin/filter"],"content":"This plugin filters out content from your vault, so that only finalized content is made available. This prevents 英语 from being published. By default, it filters out all pages with draft: true in the frontmatter and leaves all other pages intact.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin has no configuration options.\nAPI\n\nCategory: Filter\nFunction name: Plugin.RemoveDrafts().\nSource: quartz/plugins/filters/draft.ts.\n"},"Resource/GitHub/Resource":{"slug":"Resource/GitHub/Resource","filePath":"Resource/GitHub/Resource.md","title":"Resource","links":[],"tags":[],"content":""},"Resource/GitHub/RoamFlavoredMarkdown":{"slug":"Resource/GitHub/RoamFlavoredMarkdown","filePath":"Resource/GitHub/RoamFlavoredMarkdown.md","title":"RoamFlavoredMarkdown","links":["Area/EE/人工智能","Configuration"],"tags":["plugin/transformer"],"content":"This plugin provides support for Roam Research compatibility. See 人工智能 for more information.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin accepts the following configuration options:\n\norComponent: If true (default), converts Roam {{ or:ONE|TWO|THREE }} shortcodes into HTML Dropdown options.\nTODOComponent: If true (default), converts Roam {{[[TODO]]}} shortcodes into HTML check boxes.\nDONEComponent: If true (default), converts Roam {{[[DONE]]}} shortcodes into checked HTML check boxes.\nvideoComponent: If true (default), converts Roam {{[[video]]:URL}} shortcodes into embeded HTML video.\naudioComponent: If true (default), converts Roam {{[[audio]]:URL}} shortcodes into embeded HTML audio.\npdfComponent: If true (default), converts Roam {{[[pdf]]:URL}} shortcodes into embeded HTML PDF viewer.\nblockquoteComponent: If true (default), converts Roam {{[[&gt;]]}} shortcodes into Quartz blockquotes.\n\nAPI\n\nCategory: Transformer\nFunction name: Plugin.RoamFlavoredMarkdown().\nSource: quartz/plugins/transformers/roam.ts.\n"},"Resource/GitHub/Static":{"slug":"Resource/GitHub/Static","filePath":"Resource/GitHub/Static.md","title":"Static","links":["Archive/Read/configuration","Resource/Movie/Assets","Resource/GitHub/Static"],"tags":["plugin/emitter"],"content":"This plugin emits all static resources needed by Quartz. This is used, for example, for fonts and images that need a stable position, such as banners and icons. The plugin respects the ignorePatterns in the global configuration.\n\n\n                  \n                  Important\n                  \n                \n\n\nThis is different from Assets. The resources from the Static plugin are located under quartz/static, whereas Assets renders all static resources under content and is used for images, videos, audio, etc. that are directly referenced by your markdown content.\n\n\n\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin has no configuration options.\nAPI\n\nCategory: Emitter\nFunction name: Plugin.Static().\nSource: quartz/plugins/emitters/static.ts.\n"},"Resource/GitHub/SyntaxHighlighting":{"slug":"Resource/GitHub/SyntaxHighlighting","filePath":"Resource/GitHub/SyntaxHighlighting.md","title":"SyntaxHighlighting","links":["Area/EE/STM32","Archive/Read/configuration"],"tags":["plugin/transformer"],"content":"This plugin is used to add syntax highlighting to code blocks in Quartz. See STM32 for more information.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin accepts the following configuration options:\n\ntheme: a separate id of one of the themes bundled with Shikiji. One for light mode and one for dark mode. Defaults to theme: { light: &quot;github-light&quot;, dark: &quot;github-dark&quot; }.\nkeepBackground: If set to true, the background of the Shikiji theme will be used. With false (default) the Quartz theme color for background will be used instead.\n\nIn addition, you can further override the colours in the quartz/styles/syntax.scss file.\nAPI\n\nCategory: Transformer\nFunction name: Plugin.SyntaxHighlighting().\nSource: quartz/plugins/transformers/syntax.ts.\n"},"Resource/GitHub/TableOfContents":{"slug":"Resource/GitHub/TableOfContents","filePath":"Resource/GitHub/TableOfContents.md","title":"TableOfContents","links":["Area/EE/常用芯片手册","Archive/Read/configuration"],"tags":["plugin/transformer"],"content":"This plugin generates a table of contents (TOC) for Markdown documents. See 常用芯片手册 for more information.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin accepts the following configuration options:\n\nmaxDepth: Limits the depth of headings included in the TOC, ranging from 1 (top level headings only) to 6 (all heading levels). Default is 3.\nminEntries: The minimum number of heading entries required for the TOC to be displayed. Default is 1.\nshowByDefault: If true (default), the TOC should be displayed by default. Can be overridden by frontmatter settings.\ncollapseByDefault: If true, the TOC will start in a collapsed state. Default is false.\n\n\n\n                  \n                  Warning\n                  \n                \n\n\nThis plugin needs the Component.TableOfContents component in quartz.layout.ts to determine where to display the TOC. Without it, nothing will be displayed. They should always be added or removed together.\n\n\n\nAPI\n\nCategory: Transformer\nFunction name: Plugin.TableOfContents().\nSource: quartz/plugins/transformers/toc.ts.\n"},"Resource/GitHub/TagPage":{"slug":"Resource/GitHub/TagPage","filePath":"Resource/GitHub/TagPage.md","title":"TagPage","links":["Area/EE/CPP","Archive/Read/configuration"],"tags":["plugin/emitter"],"content":"This plugin emits dedicated pages for each tag used in the content. See CPP for more information.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThe pages are displayed using the defaultListPageLayout in quartz.layouts.ts. For the content, the TagContent component is used. If you want to modify the layout, you must edit it directly (quartz/components/pages/TagContent.tsx).\nThis plugin accepts the following configuration options:\n\nsort: A function of type (f1: QuartzPluginData, f2: QuartzPluginData) =&gt; number used to sort entries. Defaults to sorting by date and tie-breaking on lexographical order.\n\nAPI\n\nCategory: Emitter\nFunction name: Plugin.TagPage().\nSource: quartz/plugins/emitters/tagPage.tsx.\n"},"Resource/Movie/AliasRedirects":{"slug":"Resource/Movie/AliasRedirects","filePath":"Resource/Movie/AliasRedirects.md","title":"AliasRedirects","links":["Archive/Read/configuration"],"tags":["plugin/emitter"],"content":"This plugin emits HTML redirect pages for aliases and permalinks defined in the frontmatter of content files.\nFor example, A foo.md has the following frontmatter\nfoo.md---\ntitle: &quot;Foo&quot;\nalias:\n  - &quot;bar&quot;\n---\nThe target host.me/bar will be redirected to host.me/foo\nNote that these are permanent redirect.\nThe emitter supports the following aliases:\n\naliases\nalias\n\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin has no configuration options.\nAPI\n\nCategory: Emitter\nFunction name: Plugin.AliasRedirects().\nSource: quartz/plugins/emitters/aliases.ts.\n"},"Resource/Movie/Assets":{"slug":"Resource/Movie/Assets","filePath":"Resource/Movie/Assets.md","title":"Assets","links":["Archive/Read/configuration"],"tags":["plugin/emitter"],"content":"This plugin emits all non-Markdown static assets in your content folder (like images, videos, HTML, etc). The plugin respects the ignorePatterns in the global configuration.\nNote that all static assets will then be accessible through its path on your generated site, i.e: host.me/path/to/static.pdf\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin has no configuration options.\nAPI\n\nCategory: Emitter\nFunction name: Plugin.Assets().\nSource: quartz/plugins/emitters/assets.ts.\n"},"Resource/Movie/CNAME":{"slug":"Resource/Movie/CNAME","filePath":"Resource/Movie/CNAME.md","title":"CNAME","links":["Archive/Read/hosting","Archive/Read/configuration"],"tags":["plugin/emitter"],"content":"This plugin emits a CNAME record that points your subdomain to the default domain of your site.\nIf you want to use a custom domain name like quartz.example.com for the site, then this is needed.\nSee Hosting for more information.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin has no configuration options.\nAPI\n\nCategory: Emitter\nFunction name: Plugin.CNAME().\nSource: quartz/plugins/emitters/cname.ts.\n"},"Resource/Movie/Citations":{"slug":"Resource/Movie/Citations","filePath":"Resource/Movie/Citations.md","title":"Citations","links":["Archive/Read/configuration"],"tags":["plugin/transformer"],"content":"This plugin adds Citation support to Quartz.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin accepts the following configuration options:\n\nbibliographyFile: the path to the bibliography file. Defaults to ./bibliography.bib. This is relative to git source of your vault.\nsuppressBibliography: whether to suppress the bibliography at the end of the document. Defaults to false.\nlinkCitations: whether to link citations to the bibliography. Defaults to false.\ncsl: the citation style to use. Defaults to apa. Reference rehype-citation for more options.\nprettyLink: whether to use pretty links for citations. Defaults to true.\n\nAPI\n\nCategory: Transformer\nFunction name: Plugin.Citations().\nSource: quartz/plugins/transformers/citations.ts.\n"},"Resource/Movie/ComponentResources":{"slug":"Resource/Movie/ComponentResources","filePath":"Resource/Movie/ComponentResources.md","title":"ComponentResources","links":["Archive/Read/configuration"],"tags":["plugin/emitter"],"content":"This plugin manages and emits the static resources required for the Quartz framework. This includes CSS stylesheets and JavaScript scripts that enhance the functionality and aesthetics of the generated site. See also the cdnCaching option in the theme section of the configuration.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin has no configuration options.\nAPI\n\nCategory: Emitter\nFunction name: Plugin.ComponentResources().\nSource: quartz/plugins/emitters/componentResources.ts.\n"},"Resource/RSS/ContentIndex":{"slug":"Resource/RSS/ContentIndex","filePath":"Resource/RSS/ContentIndex.md","title":"ContentIndex","links":["RSS-Feed","Archive/Read/configuration"],"tags":["plugin/emitter"],"content":"This plugin emits both RSS and an XML sitemap for your site. The RSS Feed allows users to subscribe to content on your site and the sitemap allows search engines to better index your site. The plugin also emits a contentIndex.json file which is used by dynamic frontend components like search and graph.\nThis plugin emits a comprehensive index of the site’s content, generating additional resources such as a sitemap, an RSS feed, and a\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin accepts the following configuration options:\n\nenableSiteMap: If true (default), generates a sitemap XML file (sitemap.xml) listing all site URLs for search engines in content discovery.\nenableRSS: If true (default), produces an RSS feed (index.xml) with recent content updates.\nrssLimit: Defines the maximum number of entries to include in the RSS feed, helping to focus on the most recent or relevant content. Defaults to 10.\nrssFullHtml: If true, the RSS feed includes full HTML content. Otherwise it includes just summaries.\nrssSlug: Slug to the generated RSS feed XML file. Defaults to &quot;index&quot;.\nincludeEmptyFiles: If true (default), content files with no body text are included in the generated index and resources.\n\nAPI\n\nCategory: Emitter\nFunction name: Plugin.ContentIndex().\nSource: quartz/plugins/emitters/contentIndex.ts.\n"},"Resource/RSS/ContentPage":{"slug":"Resource/RSS/ContentPage","filePath":"Resource/RSS/ContentPage.md","title":"ContentPage","links":["Archive/Read/layout","Archive/Read/configuration"],"tags":["plugin/emitter"],"content":"This plugin is a core component of the Quartz framework. It generates the HTML pages for each piece of Markdown content. It emits the full-page layout, including headers, footers, and body content, among others.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin has no configuration options.\nAPI\n\nCategory: Emitter\nFunction name: Plugin.ContentPage().\nSource: quartz/plugins/emitters/contentPage.tsx.\n"},"Resource/RSS/CrawlLinks":{"slug":"Resource/RSS/CrawlLinks","filePath":"Resource/RSS/CrawlLinks.md","title":"CrawlLinks","links":["Area/EE/工业互联网","Archive/Read/configuration"],"tags":["plugin/transformer"],"content":"This plugin parses links and processes them to point to the right places. It is also needed for embedded links (like images). See 工业互联网 for more information.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin accepts the following configuration options:\n\nmarkdownLinkResolution: Sets the strategy for resolving Markdown paths, can be &quot;absolute&quot; (default), &quot;relative&quot; or &quot;shortest&quot;. You should use the same setting here as in Obsidian.\n\nabsolute: Path relative to the root of the content folder.\nrelative: Path relative to the file you are linking from.\nshortest: Name of the file. If this isn’t enough to identify the file, use the full absolute path.\n\n\nprettyLinks: If true (default), simplifies links by removing folder paths, making them more user friendly (e.g. folder/deeply/nested/note becomes note).\nopenLinksInNewTab: If true, configures external links to open in a new tab. Defaults to false.\nlazyLoad: If true, adds lazy loading to resource elements (img, video, etc.) to improve page load performance. Defaults to false.\nexternalLinkIcon: Adds an icon next to external links when true (default) to visually distinguishing them from internal links.\n\n\n\n                  \n                  Warning\n                  \n                \n\n\nRemoving this plugin is not recommended and will likely break the page.\n\n\n\nAPI\n\nCategory: Transformer\nFunction name: Plugin.CrawlLinks().\nSource: quartz/plugins/transformers/links.ts.\n"},"Resource/RSS/CreatedModifiedDate":{"slug":"Resource/RSS/CreatedModifiedDate","filePath":"Resource/RSS/CreatedModifiedDate.md","title":"CreatedModifiedDate","links":["Archive/Read/authoring-content","Archive/Read/configuration","Resource/RSS/Frontmatter","Archive/Read/hosting"],"tags":["plugin/transformer"],"content":"This plugin determines the created, modified, and published dates for a document using three potential data sources: frontmatter metadata, Git history, and the filesystem. See Syntax for more information.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin accepts the following configuration options:\n\npriority: The data sources to consult for date information. Highest priority first. Possible values are &quot;frontmatter&quot;, &quot;git&quot;, and &quot;filesystem&quot;. Defaults to [&quot;frontmatter&quot;, &quot;git&quot;, &quot;filesystem&quot;].\n\nWhen loading the frontmatter, the value of List is used.\n\n\n                  \n                  Warning\n                  \n                \n\n\nIf you rely on git for dates, make sure defaultDateType is set to modified in quartz.config.ts.\nDepending on how you host your Quartz, the filesystem dates of your local files may not match the final dates. In these cases, it may be better to use git or frontmatter to guarantee correct dates.\n\n\n\nAPI\n\nCategory: Transformer\nFunction name: Plugin.CreatedModifiedDate().\nSource: quartz/plugins/transformers/lastmod.ts.\n"},"Resource/RSS/CustomOgImages":{"slug":"Resource/RSS/CustomOgImages","filePath":"Resource/RSS/CustomOgImages.md","title":"Custom OG Images","links":["Archive/Read/configuration"],"tags":["feature/emitter"],"content":"The Custom OG Images emitter plugin generates social media preview images for your pages. It uses satori to convert HTML/CSS into images, allowing you to create beautiful and consistent social media preview cards for your content.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nFeatures\n\nAutomatically generates social media preview images for each page\nSupports both light and dark mode themes\nCustomizable through frontmatter properties\nFallback to default image when needed\nFull control over image design through custom components\n\nConfiguration\n\n\n                  \n                  Info \n                  \n                \n\n\nThe baseUrl property in your configuration must be set properly for social images to work correctly, as they require absolute paths.\n\n\n\nThis plugin accepts the following configuration options:\nquartz.config.tsimport { CustomOgImages } from &quot;./quartz/plugins/emitters/ogImage&quot;\n \nconst config: QuartzConfig = {\n  plugins: {\n    emitters: [\n      CustomOgImages({\n        colorScheme: &quot;lightMode&quot;, // what colors to use for generating image, same as theme colors from config, valid values are &quot;darkMode&quot; and &quot;lightMode&quot;\n        width: 1200, // width to generate with (in pixels)\n        height: 630, // height to generate with (in pixels)\n        excludeRoot: false, // wether to exclude &quot;/&quot; index path to be excluded from auto generated images (false = use auto, true = use default og image)\n        imageStructure: defaultImage, // custom image component to use\n      }),\n    ],\n  },\n}\nConfiguration Options\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptionTypeDefaultDescriptioncolorSchemestring”lightMode”Theme to use for generating images (“darkMode” or “lightMode”)widthnumber1200Width of the generated image in pixelsheightnumber630Height of the generated image in pixelsexcludeRootbooleanfalseWhether to exclude the root index page from auto-generated imagesimageStructurecomponentdefaultImageCustom component to use for image generation\nFrontmatter Properties\nThe following properties can be used to customize your link previews:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPropertyAliasSummarysocialDescriptiondescriptionDescription to be used for preview.socialImageimage, coverLink to preview image.\nThe socialImage property should contain a link to an image either relative to quartz/static, or a full URL. If you have a folder for all your images in quartz/static/my-images, an example for socialImage could be &quot;my-images/cover.png&quot;. Alternatively, you can use a fully qualified URL like &quot;example.com/cover.png&quot;.\n\n\n                  \n                  Info \n                  \n                \n\n\nThe priority for what image will be used for the cover image looks like the following: frontmatter property &gt; generated image (if enabled) &gt; default image.\nThe default image (quartz/static/og-image.png) will only be used as a fallback if nothing else is set. If the Custom OG Images emitter plugin is enabled, it will be treated as the new default per page, but can be overwritten by setting the socialImage frontmatter property for that page.\n\n\n\nCustomization\nYou can fully customize how the images being generated look by passing your own component to imageStructure. This component takes JSX + some page metadata/config options and converts it to an image using satori. Vercel provides an online playground that can be used to preview how your JSX looks like as a picture. This is ideal for prototyping your custom design.\nFonts\nYou will also be passed an array containing a header and a body font (where the first entry is header and the second is body). The fonts matches the ones selected in theme.typography.header and theme.typography.body from quartz.config.ts and will be passed in the format required by satori. To use them in CSS, use the .name property (e.g. fontFamily: fonts[1].name to use the “body” font family).\nAn example of a component using the header font could look like this:\nsocialImage.tsxexport const myImage: SocialImageOptions[&quot;imageStructure&quot;] = (...) =&gt; {\n  return &lt;p style={{ fontFamily: fonts[0].name }}&gt;Cool Header!&lt;/p&gt;\n}\n\n\n                  \n                  Local fonts \n                  \n                \n\n\nFor cases where you use a local fonts under static folder, make sure to set the correct @font-face in custom.scss\ncustom.scss@font-face {\n  font-family: &quot;Newsreader&quot;;\n  font-style: normal;\n  font-weight: normal;\n  font-display: swap;\n  src: url(&quot;/static/Newsreader.woff2&quot;) format(&quot;woff2&quot;);\n}\nThen in quartz/util/og.tsx, you can load the Satori fonts like so:\nquartz/util/og.tsximport { joinSegments, QUARTZ } from &quot;../path&quot;\nimport fs from &quot;fs&quot;\nimport path from &quot;path&quot;\n \nconst newsreaderFontPath = joinSegments(QUARTZ, &quot;static&quot;, &quot;Newsreader.woff2&quot;)\nexport async function getSatoriFonts(headerFont: FontSpecification, bodyFont: FontSpecification) {\n  // ... rest of implementation remains same\n  const fonts: SatoriOptions[&quot;fonts&quot;] = [\n    ...headerFontData.map((data, idx) =&gt; ({\n      name: headerFontName,\n      data,\n      weight: headerWeights[idx],\n      style: &quot;normal&quot; as const,\n    })),\n    ...bodyFontData.map((data, idx) =&gt; ({\n      name: bodyFontName,\n      data,\n      weight: bodyWeights[idx],\n      style: &quot;normal&quot; as const,\n    })),\n    {\n      name: &quot;Newsreader&quot;,\n      data: await fs.promises.readFile(path.resolve(newsreaderFontPath)),\n      weight: 400,\n      style: &quot;normal&quot; as const,\n    },\n  ]\n \n  return fonts\n}\nThis font then can be used with your custom structure.\n\n\n\nExamples\nHere are some example image components you can use as a starting point:\nBasic Example\nThis example will generate images that look as follows:\n\n\n\n\n\n\n\n\n\n\n\n\n\nLightDark\nimport { SatoriOptions } from &quot;satori/wasm&quot;\nimport { GlobalConfiguration } from &quot;../cfg&quot;\nimport { SocialImageOptions, UserOpts } from &quot;./imageHelper&quot;\nimport { QuartzPluginData } from &quot;../plugins/vfile&quot;\n \nexport const customImage: SocialImageOptions[&quot;imageStructure&quot;] = (\n  cfg: GlobalConfiguration,\n  userOpts: UserOpts,\n  title: string,\n  description: string,\n  fonts: SatoriOptions[&quot;fonts&quot;],\n  fileData: QuartzPluginData,\n) =&gt; {\n  // How many characters are allowed before switching to smaller font\n  const fontBreakPoint = 22\n  const useSmallerFont = title.length &gt; fontBreakPoint\n \n  const { colorScheme } = userOpts\n  return (\n    &lt;div\n      style={{\n        display: &quot;flex&quot;,\n        flexDirection: &quot;row&quot;,\n        justifyContent: &quot;flex-start&quot;,\n        alignItems: &quot;center&quot;,\n        height: &quot;100%&quot;,\n        width: &quot;100%&quot;,\n      }}\n    &gt;\n      &lt;div\n        style={{\n          display: &quot;flex&quot;,\n          alignItems: &quot;center&quot;,\n          justifyContent: &quot;center&quot;,\n          height: &quot;100%&quot;,\n          width: &quot;100%&quot;,\n          backgroundColor: cfg.theme.colors[colorScheme].light,\n          flexDirection: &quot;column&quot;,\n          gap: &quot;2.5rem&quot;,\n          paddingTop: &quot;2rem&quot;,\n          paddingBottom: &quot;2rem&quot;,\n        }}\n      &gt;\n        &lt;p\n          style={{\n            color: cfg.theme.colors[colorScheme].dark,\n            fontSize: useSmallerFont ? 70 : 82,\n            marginLeft: &quot;4rem&quot;,\n            textAlign: &quot;center&quot;,\n            marginRight: &quot;4rem&quot;,\n            fontFamily: fonts[0].name,\n          }}\n        &gt;\n          {title}\n        &lt;/p&gt;\n        &lt;p\n          style={{\n            color: cfg.theme.colors[colorScheme].dark,\n            fontSize: 44,\n            marginLeft: &quot;8rem&quot;,\n            marginRight: &quot;8rem&quot;,\n            lineClamp: 3,\n            fontFamily: fonts[1].name,\n          }}\n        &gt;\n          {description}\n        &lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div\n        style={{\n          height: &quot;100%&quot;,\n          width: &quot;2vw&quot;,\n          position: &quot;absolute&quot;,\n          backgroundColor: cfg.theme.colors[colorScheme].tertiary,\n          opacity: 0.85,\n        }}\n      /&gt;\n    &lt;/div&gt;\n  )\n}\nAdvanced Example\nThe following example includes a customized social image with a custom background and formatted date:\ncustom-og.tsxexport const og: SocialImageOptions[&quot;Component&quot;] = (\n  cfg: GlobalConfiguration,\n  fileData: QuartzPluginData,\n  { colorScheme }: Options,\n  title: string,\n  description: string,\n  fonts: SatoriOptions[&quot;fonts&quot;],\n) =&gt; {\n  let created: string | undefined\n  let reading: string | undefined\n  if (fileData.dates) {\n    created = formatDate(getDate(cfg, fileData)!, cfg.locale)\n  }\n  const { minutes, text: _timeTaken, words: _words } = readingTime(fileData.text!)\n  reading = i18n(cfg.locale).components.contentMeta.readingTime({\n    minutes: Math.ceil(minutes),\n  })\n \n  const Li = [created, reading]\n \n  return (\n    &lt;div\n      style={{\n        position: &quot;relative&quot;,\n        display: &quot;flex&quot;,\n        flexDirection: &quot;row&quot;,\n        alignItems: &quot;flex-start&quot;,\n        height: &quot;100%&quot;,\n        width: &quot;100%&quot;,\n        backgroundImage: `url(&quot;https://${cfg.baseUrl}/static/og-image.jpeg&quot;)`,\n        backgroundSize: &quot;100% 100%&quot;,\n      }}\n    &gt;\n      &lt;div\n        style={{\n          position: &quot;absolute&quot;,\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          background: &quot;radial-gradient(circle at center, transparent, rgba(0, 0, 0, 0.4) 70%)&quot;,\n        }}\n      /&gt;\n      &lt;div\n        style={{\n          display: &quot;flex&quot;,\n          height: &quot;100%&quot;,\n          width: &quot;100%&quot;,\n          flexDirection: &quot;column&quot;,\n          justifyContent: &quot;flex-start&quot;,\n          alignItems: &quot;flex-start&quot;,\n          gap: &quot;1.5rem&quot;,\n          paddingTop: &quot;4rem&quot;,\n          paddingBottom: &quot;4rem&quot;,\n          marginLeft: &quot;4rem&quot;,\n        }}\n      &gt;\n        &lt;img\n          src={`&quot;https://${cfg.baseUrl}/static/icon.jpeg&quot;`}\n          style={{\n            position: &quot;relative&quot;,\n            backgroundClip: &quot;border-box&quot;,\n            borderRadius: &quot;6rem&quot;,\n          }}\n          width={80}\n        /&gt;\n        &lt;div\n          style={{\n            display: &quot;flex&quot;,\n            flexDirection: &quot;column&quot;,\n            textAlign: &quot;left&quot;,\n            fontFamily: fonts[0].name,\n          }}\n        &gt;\n          &lt;h2\n            style={{\n              color: cfg.theme.colors[colorScheme].light,\n              fontSize: &quot;3rem&quot;,\n              fontWeight: 700,\n              marginRight: &quot;4rem&quot;,\n              fontFamily: fonts[0].name,\n            }}\n          &gt;\n            {title}\n          &lt;/h2&gt;\n          &lt;ul\n            style={{\n              color: cfg.theme.colors[colorScheme].gray,\n              gap: &quot;1rem&quot;,\n              fontSize: &quot;1.5rem&quot;,\n              fontFamily: fonts[1].name,\n            }}\n          &gt;\n            {Li.map((item, index) =&gt; {\n              if (item) {\n                return &lt;li key={index}&gt;{item}&lt;/li&gt;\n              }\n            })}\n          &lt;/ul&gt;\n        &lt;/div&gt;\n        &lt;p\n          style={{\n            color: cfg.theme.colors[colorScheme].light,\n            fontSize: &quot;1.5rem&quot;,\n            overflow: &quot;hidden&quot;,\n            marginRight: &quot;8rem&quot;,\n            textOverflow: &quot;ellipsis&quot;,\n            display: &quot;-webkit-box&quot;,\n            WebkitLineClamp: 7,\n            WebkitBoxOrient: &quot;vertical&quot;,\n            lineClamp: 7,\n            fontFamily: fonts[1].name,\n          }}\n        &gt;\n          {description}\n        &lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}"},"Resource/RSS/Description":{"slug":"Resource/RSS/Description","filePath":"Resource/RSS/Description.md","title":"Description","links":["RSS-Feed","Area/EE/CPP","Archive/Read/authoring-content","Archive/Read/configuration"],"tags":["plugin/transformer"],"content":"This plugin generates descriptions that are used as metadata for the HTML head, the RSS Feed and in CPP if there is no main body content, the description is used as the text between the title and the listing.\nIf the frontmatter contains a description property, it is used (see Syntax). Otherwise, the plugin will do its best to use the first few sentences of the content to reach the target description length.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin accepts the following configuration options:\n\ndescriptionLength: the maximum length of the generated description. Default is 150 characters. The cut off happens after the first sentence that ends after the given length.\nreplaceExternalLinks: If true (default), replace external links with their domain and path in the description (e.g. domain.tld/some_page/another_page is replaced with domain.tld/some_page/another_page).\n\nAPI\n\nCategory: Transformer\nFunction name: Plugin.Description().\nSource: quartz/plugins/transformers/description.ts.\n"},"Resource/RSS/ExplicitPublish":{"slug":"Resource/RSS/ExplicitPublish","filePath":"Resource/RSS/ExplicitPublish.md","title":"ExplicitPublish","links":["Resource/GitHub/RemoveDrafts","Area/EE/英语","Archive/Read/configuration"],"tags":["plugin/filter"],"content":"This plugin filters content based on an explicit publish flag in the frontmatter, allowing only content that is explicitly marked for publication to pass through. It’s the opt-in version of RemoveDrafts. See 英语 for more information.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin has no configuration options.\nAPI\n\nCategory: Filter\nFunction name: Plugin.ExplicitPublish().\nSource: quartz/plugins/filters/explicit.ts.\n"},"Resource/RSS/Favicon":{"slug":"Resource/RSS/Favicon","filePath":"Resource/RSS/Favicon.md","title":"Favicon","links":["Archive/Read/configuration"],"tags":["plugin/emitter"],"content":"This plugin emits a favicon.ico into the public folder. It creates the favicon from icon.png located in the quartz/static folder.\nThe plugin resizes icon.png to 48x48px to make it as small as possible.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin has no configuration options.\nAPI\n\nCategory: Emitter\nFunction name: Plugin.Favicon().\nSource: quartz/plugins/emitters/favicon.ts.\n"},"Resource/RSS/FolderPage":{"slug":"Resource/RSS/FolderPage","filePath":"Resource/RSS/FolderPage.md","title":"FolderPage","links":["Area/EE/CPP","advanced/","Archive/Read/configuration"],"tags":["plugin/emitter"],"content":"This plugin generates index pages for folders, creating a listing page for each folder that contains multiple content files. See CPP for more information.\nExample: Advanced\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThe pages are displayed using the defaultListPageLayout in quartz.layouts.ts. For the content, the FolderContent component is used. If you want to modify the layout, you must edit it directly (quartz/components/pages/FolderContent.tsx).\nThis plugin accepts the following configuration options:\n\nsort: A function of type (f1: QuartzPluginData, f2: QuartzPluginData) =&gt; number used to sort entries. Defaults to sorting by date and tie-breaking on lexographical order.\n\nAPI\n\nCategory: Emitter\nFunction name: Plugin.FolderPage().\nSource: quartz/plugins/emitters/folderPage.tsx.\n"},"Resource/RSS/Frontmatter":{"slug":"Resource/RSS/Frontmatter","filePath":"Resource/RSS/Frontmatter.md","title":"Frontmatter","links":["Archive/Read/authoring-content","Area/EE/工业互联网","Area/EE/MCU","Archive/Read/configuration"],"tags":["plugin/transformer"],"content":"This plugin parses the frontmatter of the page using the gray-matter library. See Syntax, 工业互联网 and MCU for more information.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin accepts the following configuration options:\n\ndelimiters: the delimiters to use for the frontmatter. Can have one value (e.g. &quot;---&quot;) or separate values for opening and closing delimiters (e.g. [&quot;---&quot;, &quot;~~~&quot;]). Defaults to &quot;---&quot;.\nlanguage: the language to use for parsing the frontmatter. Can be yaml (default) or toml.\n\n\n\n                  \n                  Warning\n                  \n                \n\n\nThis plugin must not be removed, otherwise Quartz will break.\n\n\n\nList\nQuartz supports the following frontmatter:\n\ntitle\n\ntitle\n\n\ndescription\n\ndescription\n\n\npermalink\n\npermalink\n\n\ncomments\n\ncomments\n\n\nlang\n\nlang\n\n\npublish\n\npublish\n\n\ndraft\n\ndraft\n\n\nenableToc\n\nenableToc\n\n\ntags\n\ntags\ntag\n\n\naliases\n\naliases\nalias\n\n\ncssclasses\n\ncssclasses\ncssclass\n\n\nsocialDescription\n\nsocialDescription\n\n\nsocialImage\n\nsocialImage\nimage\ncover\n\n\ncreated\n\ncreated\ndate\n\n\nmodified\n\nmodified\nlastmod\nupdated\nlast-modified\n\n\npublished\n\npublished\npublishDate\ndate\n\n\n\nAPI\n\nCategory: Transformer\nFunction name: Plugin.Frontmatter().\nSource: quartz/plugins/transformers/frontmatter.ts.\n"},"Resource/RSS/GitHubFlavoredMarkdown":{"slug":"Resource/RSS/GitHubFlavoredMarkdown","filePath":"Resource/RSS/GitHubFlavoredMarkdown.md","title":"GitHubFlavoredMarkdown","links":["Archive/Read/configuration"],"tags":["plugin/transformer"],"content":"This plugin enhances Markdown processing to support GitHub Flavored Markdown (GFM) which adds features like autolink literals, footnotes, strikethrough, tables and tasklists.\nIn addition, this plugin adds optional features for typographic refinement (such as converting straight quotes to curly quotes, dashes to en-dashes/em-dashes, and ellipses) and automatic heading links as a symbol that appears next to the heading on hover.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin accepts the following configuration options:\n\nenableSmartyPants: When true, enables typographic enhancements. Default is true.\nlinkHeadings: When true, automatically adds links to headings. Default is true.\n\nAPI\n\nCategory: Transformer\nFunction name: Plugin.GitHubFlavoredMarkdown().\nSource: quartz/plugins/transformers/gfm.ts.\n"},"Resource/RSS/HardLineBreaks":{"slug":"Resource/RSS/HardLineBreaks","filePath":"Resource/RSS/HardLineBreaks.md","title":"HardLineBreaks","links":["Area/EE/工业互联网","Archive/Read/configuration"],"tags":["plugin/transformer"],"content":"This plugin automatically converts single line breaks in Markdown text into hard line breaks in the HTML output. This plugin is not enabled by default as this doesn’t follow the semantics of actual Markdown but you may enable it if you’d like parity with Obsidian.\n\n\n                  \n                  Note\n                  \n                \n\n\nFor information on how to add, remove or configure plugins, see the Configuration page.\n\n\n\nThis plugin has no configuration options.\nAPI\n\nCategory: Transformer\nFunction name: Plugin.HardLineBreaks().\nSource: quartz/plugins/transformers/linebreaks.ts.\n"},"Resource/index":{"slug":"Resource/index","filePath":"Resource/index.md","title":"Resource","links":[],"tags":[],"content":""},"index":{"slug":"index","filePath":"index.md","title":"数字花园","links":["Area/KM/数字花园","Project","Area","Resource","Archive"],"tags":[],"content":"使用PARA搭建数字花园\n🪴 数字花园\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n层级英文全称中文含义描述示例PProject项目有明确目标、截止日期的一系列任务。 这是你当前正在积极推动的工作。- 完成季度财报 - 撰写一篇博客文章 - 策划一场婚礼AArea领域需要长期维持并关注标准的重要活动领域。 它们没有终点，但需要持续投入。- 健康管理 - 个人财务 - 学习法语RResource资源来可能感兴趣的主题或素材。 这是你的知识库或灵感池，目前没有明确项目与之关联。- 关于区块链的阅读清单 - 网页设计灵感图库AArchive存档来自其他三个类别的非活动项目。 已完成的项目、不再负责的领域、不再感兴趣的资源。- 已完成的项目文档 - 旧工作的文件 - 过去研究的笔记\n🔧 PARA\nkanban\n  [Project]\n    [AUTOSAR]\n    [汽车电子]\n  [Area]\n    [AI]\n    [CS]\n    [EE]\n    [KM]\n  [Resource]\n    [Education]\n    [Github]\n    [Movies]\n    [RSS]\n  [Archive]\n    [Read]\n\n\n🧠 关于\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n链接说明标签note笔记软件noteKM知识管理KMR参考手册ReferenceNAV导航nav"},"tags/Archive":{"slug":"tags/Archive","filePath":"tags/Archive.md","title":"Archive","links":[],"tags":[],"content":""},"tags/Area":{"slug":"tags/Area","filePath":"tags/Area.md","title":"标签: Area","links":["Project/AUTOSAR/方法论"],"tags":[],"content":"Want to create your own custom component? Check out the advanced guide on 方法论 for more information."},"tags/Project":{"slug":"tags/Project","filePath":"tags/Project.md","title":"标签: Project","links":[],"tags":[],"content":""},"tags/Resource":{"slug":"tags/Resource","filePath":"tags/Resource.md","title":"Resource","links":[],"tags":[],"content":""}}